'''
This SConscript performs circular RNAs detection by means of the
testrealign.x program of segemehl [1]
    
[1] Hoffmann, S. et al. 
    
    A multi-split mapping algorithm for circular RNA, splicing, 
    trans-splicing and fusion detection. 
    
    Genome Biology 15, R34 (2014).

Software dependencies:
 * testrealign.x
 * Samtools-1.1
 * grep, cut, sort

When called from a SConscript it imports the following variables:
 * mapping_file
 * sample_name
 * segemehlcirc_cpus
 * segemehlcirc_genome_fasta

'''

import os

Import('*')

try:
    env = env.Clone()
    mapfile = mapping_file
    mapfile_basename = sample_name
    CPUS = segemehlcirc_cpus
    GENOME_FASTA = segemehlcirc_genome_fasta
except NameError:
    vars = Variables('vars.py')
    vars.Add('CPUS', 'Number of parallel jobs', '4')
    vars.Add('BAM', 'Alignment file in SAM/BAM format from segemehl', 'sample.bam')
    vars.Add('SAMPLE', 'The sample name', 'sample')
    vars.Add('GENOME_FASTA', 'The FASTA file with genome sequence', 'genome.fa')
    
    env = Environment(ENV=os.environ,
                      variables=vars)
    
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

    mapfile = env['BAM']
    mapfile_basename = env['SAMPLE']
    CPUS = env['CPUS']
    GENOME_FASTA = env['GENOME_FASTA']

## set logging id
log_id = "[TESTREALIGN]"
try:
    env['LOG_PREFIX'] = env['LOG_PREFIX'] + log_id
except KeyError:
    env['LOG_PREFIX'] = log_id

env['ENV']['LOG_PREFIX'] = env['LOG_PREFIX']

## SORT SAM/BAM
sort_alignments_cmd = "samtools view -u $(-@{0}$) "\
                      "$SOURCE | samtools sort $(-@{0}$)".format(CPUS)+\
                      " -O 'sam' -T $(testrealign_{}$) | gzip > $TARGET".format(mapfile_basename)
sort_alignments = env.Command(["{}_sorted.sam.gz".format(mapfile_basename)], 
                            [mapfile], sort_alignments_cmd)

## COLLECT SPLICE JUNCTIONS
collect_splice_cmd = "testrealign.x -d " + GENOME_FASTA + " -q $SOURCE -n "\
                     "-U ${TARGETS[0]} -T ${TARGETS[1]} " + "$(-t {}$)".format(CPUS)
collect_splice_targets = ["splicesites.bed", "transrealigned.bed"]
collect_splice = env.Command(collect_splice_targets, sort_alignments[0], collect_splice_cmd)

## EXTRACT CIRCULAR SPLICE EVENTS
extract_circular_cmd = "grep ':C:' ${SOURCES[0]} | cut -f 4 | cut -f 2 -d: |"\
                       "sort | uniq -c | sort -k1,1n -k2,2n > $TARGET"
extract_circular = env.Command(["{}_circular.junction.stats.txt".format(mapfile_basename)], 
                                [collect_splice], extract_circular_cmd)

## COUNT AND REPORT MAPPED READS
mapped_reads_target = 'segemehl_mapped_reads_count.txt'
mapped_reads_cmd    = '''zcat ${SOURCE} | samtools view -F 4 - '''\
                      '''| cut -f 1 | sort | uniq | wc -l > $TARGET'''
mapped_reads        = env.Command(mapped_reads_target, sort_alignments, mapped_reads_cmd) 

Return('sort_alignments', 'collect_splice', 'extract_circular', 'mapped_reads')


'''

This SConscript converts BAM (un)alignments to FASTQ format, 
a.i. to convert unmapped reads to their original FASTQ format.

Software dependencies:
 * Bedtools v2.23
 * Samtools v1.2

When called from a SConscript it imports the following variables:
 * env
 * bam2fq_cpus
 * bam2fq_bamfile
 * bam2fq_prefix_id
 * bam2fq_paired

Returns:
 [ID_1.fq.gz] or
 [ID_1.fq.gz, ID_2.fq.gz] if paired-end
'''

import os

Import('*')

try:
    # these are the variables passed with 'exports' from a calling SConscript
    env = env.Clone()
    CPUS = bam2fq_cpus
    BAM = bam2fq_bamfile
    ID = bam2fq_prefix_id
    PAIRED = bam2fq_paired

except NameError:
    vars = Variables('vars.py')
    vars.Add('CPUS' , 'Max parallel jobs to execute'    , '4')
    vars.Add('BAM'  , 'The alignment file in BAM format', 'unmapped.bam')
    vars.Add('ID'   , 'An id to name output file(s)'    , 'unmapped')
    vars.Add('PAIRED','Whether the reads are paired-end', 'True')
    
    cmdline_env = Environment(ENV=os.environ,
                              variables=vars)
    
    Help(vars.GenerateHelpText(cmdline_env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

    # These are the variables given from the command line when the SConscript is called
    # standalone
    env = cmdline_env
    CPUS = env['CPUS']
    BAM = env['BAM']
    ID = env['ID']
    PAIRED = env['PAIRED']

## set logging id
log_id = "[BAMTOFASTQ]"
try:
    env['LOG_PREFIX'] = env['LOG_PREFIX'] + log_id
except KeyError:
    env['LOG_PREFIX'] = log_id

env['ENV']['LOG_PREFIX'] = env['LOG_PREFIX']

chdir_working_cmd = '''cd ''' + Dir('.').abspath
chdir_parent_cmd  = '''cd ''' + Dir('#').abspath
#convert_cmd = '''samtools sort -n $(-l 0 -@ ''' + CPUS + ''' -O 'bam' -T ''' + ID +\
#              '''$) ${SOURCE.abspath} | bedtools bamtofastq -i - -fq ${TARGETS[0].filebase} '''
convert_targets = [ID + '_1.fq.gz']

#if PAIRED.lower() in ['yes', 'y', '1', 'true', 't']:
#    convert_cmd = convert_cmd + ''' -fq2 ${TARGETS[1].filebase}'''
#    convert_targets.append(ID + '_2.fq.gz')
#convert_cmd = convert_cmd + ''' && gzip ${TARGETS[0].filebase} ''' 
#if PAIRED.lower() in ['yes', 'y', '1', 'true', 't']:
#    convert_cmd = convert_cmd + '''&& gzip ${TARGETS[1].filebase}'''

if env['SHELL'] == 'sh':
    env['SHELL'] = env['ENV']['SHELL']

convert_cmd = '''samtools sort -n $(-l 0 -@ ''' + CPUS + ''' -O 'bam' -T ''' + ID +\
               '''$) ${SOURCE.abspath} | bedtools bamtofastq -i - -fq /dev/stdout '''
if PAIRED.lower() in ['yes', 'y', '1', 'true', 't']:
    convert_cmd = convert_cmd + '''| paste - - - - - - - - | tee >(cut -f 1-4 | '''\
                                '''sed "s@\(.*\)[\./][12]\\t@\\1\\t@"| '''\
                                '''tr '\\t' '\\n' | gzip -c > ${TARGETS[0].file} ) | '''\
                                '''cut -f 5-8 | sed "s@\(.*\)[\./][12]\\t@\\1\\t@" | '''\
                                '''tr '\\t' '\\n' | gzip -c > ${TARGETS[1].file}'''
    convert_targets.append(ID + '_2.fq.gz')
else:
    convert_cmd = convert_cmd + ''' | gzip -c > ${TARGETS[0].file}'''

convert = env.Command(convert_targets, BAM, ' && '.join([chdir_working_cmd, 
                                                         convert_cmd,
                                                         chdir_parent_cmd])
                     )

Return('convert')



'''
Analyze circRNA predictions and set up a report
'''

import os,re
Import('*')

try:
    env = env_circrna_analyze.Clone()
except NameError, ne:
    vars = Variables('vars.py')
    vars.Add('CIRCRNAS', 'A GTF file with circRNA predictions', '')
    vars.Add('CIRCGENES', 'A 18 fields GTF file with genes intersections with '\
            'circRNAs', '')
    vars.Add('BKS_LIN_COUNTS', 'The file with linear gene expression for '\
                               'each circRNA', '')
    vars.Add('MIN_METHODS', 'Number of methods that commmonly detect a circRNA to '\
                            ' define the circRNA as reliable', 2)
    vars.Add('MIN_READS', 'Number of reads to consider a circRNA as expressed', 2)
    vars.Add('DIFF_EXP', 'Enable circRNA differential expression reporting', 'False')
    vars.Add('META', 'Table specifying sample condition', 'meta.csv')


    env = Environment(ENV=os.environ, SHELL = '/bin/bash',
                      variables=vars)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Run sample: unknown variables", unknown.keys()
        Exit(1)

env['CIRCOMPARA_HOME'] = env['ENV']['CIRCOMPARA_HOME']

## set strandness to set circRNA if stranded library
## check by HISAT parameters
env['STRANDED'] = 'F'
strandness_pattern = re.compile("--rna-strandness\s+[FR]{1,2}")
if strandness_pattern.search(env['HISAT2_EXTRA_PARAMS']):
    if not env['UNSTRANDED_CIRCS']:
        env['STRANDED'] = 'T'

## collect circrnas.gtf files into a filelist
circrnas_gtf_list_sources = env['CIRCRNAS']
circrnas_gtf_list_targets = ['circrnas.gtf.list.txt']
circrnas_gtf_list = env.WriteLinesInTxt(circrnas_gtf_list_targets,
                                        circrnas_gtf_list_sources)

## collect bks_linear_counts.tab files into a filelist
bks_linear_counts_list_sources = env['BKS_LIN_COUNTS']
bks_linear_counts_list_targets = ['bks_linear_counts.tab.list.txt']
bks_linear_counts_list = env.WriteLinesInTxt(bks_linear_counts_list_targets,
                                             bks_linear_counts_list_sources)

## get circrna raw expression
circrnas_xpr_sources = [circrnas_gtf_list, 
                        bks_linear_counts_list]
circrnas_xpr_targets = ['unfiltered_circrnas.csv', 
                        'ccp_circrna_raw_xpr.csv', 
                        'ccp_circrna_n_methods.csv', 
                        'ccp_circrna_methods.csv',
                        'ccp_bks_linexp.csv'] 
                        ## TODO: add each method expression matrix to targets

circrnas_xpr_command = '''ccp_circrna_expression.R '''\
                       '''-c ${SOURCES[0]} -l ${SOURCES[1]} '''\
                       '''-r ${MIN_READS} -m ${MIN_METHODS} '''\
                       '''-o ${TARGETS[0].dir}'''
circrnas_xpr = env.Command(circrnas_xpr_targets,
                           circrnas_xpr_sources,
                           circrnas_xpr_command)

## make report html
circrnas_analysis_cmd = '''Rscript -e 'results.dir <- dirname("$TARGET.abspath"); '''\
                        '''circrnas.gtf.file <- "${SOURCES[0].abspath}"; '''\
                        '''circ_to_genes.file <- "${SOURCES[1].abspath}"; '''\
                        '''gene_to_circ.file  <- "${SOURCES[2].abspath}"; '''\
                        '''ccp_circrna_raw_xpr.csv.file <- "${SOURCES[3].abspath}"; '''\
                        '''bks_linear_counts.tab.gz.file <- "${SOURCES[4].abspath}"; '''\
                        '''meta_file <- "${SOURCES[5].abspath}"; '''\
                        '''vars.py.filepath <- "${SOURCES[6].abspath}"; '''\
                        '''ccp_circrna_methods.csv.file <- "${SOURCES[7].abspath}"; '''\
                        '''ccp_circrna_n_methods.csv.file <- "${SOURCES[8].abspath}"; '''\
                        '''min_methods <- ${MIN_METHODS}; '''\
                        '''min_reads <- ${MIN_READS}; '''\
                        '''rmarkdown::render(input = "$CIRCOMPARA_HOME/src/circRNAs_analysis.Rmd",'''\
                        '''output_file = "$TARGET.abspath", quiet=T,'''\
                        '''intermediates_dir = dirname("$TARGET.abspath") )' '''

circrnas_analysis_targets = ["circRNAs_analysis.html", "circRNA_expression_per_sample.csv"]
circrnas_analysis_sources = [circrnas_xpr[0], 
                             env['CIRCGENES'][0], 
                             env['CIRCGENES'][1], 
                             circrnas_xpr[1], 
                             circrnas_xpr[4],
                             #env['PROCESSING_READ_STATS'],
                             env['META'],
                             env['VARS'],
                             circrnas_xpr[3],
                             circrnas_xpr[2]]
circrnas_analysis = env.Command(circrnas_analysis_targets, 
                                circrnas_analysis_sources, 
                                circrnas_analysis_cmd)

if env['DIFF_EXP']:
    circrnas_diffexp_cmd = '''Rscript -e 'results.dir <- dirname("$TARGET.abspath"); '''\
                           '''meta.file <- "${SOURCES[0].abspath}"; '''\
                           '''circrnas.per.sample.file <- "${SOURCES[1].abspath}"; '''\
                           '''rmarkdown::render(input = "$CIRCOMPARA_HOME/src/circrnas_diffexp.Rmd",'''\
                           '''output_file = "$TARGET.abspath", quiet=T,'''\
                           '''intermediates_dir = dirname("$TARGET.abspath") )' '''
    
    circrnas_diffexp_targets = "circrnas_diffexp.html"
    circrnas_diffexp_sources = [File(env['META']).abspath, circrnas_analysis[1]]
    circrnas_diffexp = env.Command(circrnas_diffexp_targets, 
                                   circrnas_diffexp_sources, 
                                   circrnas_diffexp_cmd)
      


Return('circrnas_analysis')

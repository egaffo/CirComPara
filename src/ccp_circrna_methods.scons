'''
This SConscript performs circRNAs detection on a RNA-seq sample using different
circRNA detection methods.

Software dependencies are inherited from the CIRCOMPARA-SConscripts used:
 * ccp_testrealign.scons
 * ccp_ciri.scons
 * ccp_findcirc.scons
 * ccp_tophat.scons

Imports:
 * env
 * sample_cpus
 * sample_genome_fasta
 * sample_annotation
 * sample_raw_reads
 * sample_segemehl_index
 * ciri_bwa_index
 * ciri_bwa_extra_parameters
 * ciri_script
 * ciri_extra_parameters
 * bowtie2_index
 * star_index
 * gene_pred

'''

import os

ccp_testrealign   = 'ccp_testrealign.scons'
ccp_segemehl = 'ccp_segemehl.scons'

Import('*')

try:
    env = env_sample_circrna_methods.Clone()
   #TODO
    PRE_FILTER  = False

except NameError:
    varfile = ARGUMENTS.get('VARS', 'vars.py')
    vars = Variables(varfile)
    vars.Add('CPUS', 'Set number of CPUs', '4')
    vars.Add('ANNOTATION', 'Gene annotation (Ensembl GTF)', '')
    vars.Add('GENOME_FASTA', 'The FASTA file with the reference genome', 'genome.fa')
    vars.Add('READS', 'RNA-seq reads. Comma separated list if paired-end', 'reads.fa')
    ## parameters for Segemehl/testrealign
    vars.Add('SEGEMEHL_INDEX', '''The .idx index for segemehl''', 'genome.idx')
    ## parameters for CIRI 
    vars.Add('BWA_INDEX', '''The index of the reference genome for BWA''','/path/to/bwa/index')
    vars.Add('BWA_PARAMS','Extra parameters for BWA','')
    vars.Add('CIRI', 'The full path to the CIRI_vx.x.pl perl script', '')
    ## parameters for find_circ
    vars.Add('BOWTIE2_INDEX', '''The index of the reference genome for BOWTIE2''', 
             '/path/to/bowtie2/index')
    vars.Add('BOWTIE_INDEX', '''The index of the reference genome for BOWTIE''', 
             '/path/to/bowtie/index')
   ## parameters for CIRCexplorer
    vars.Add('STAR_INDEX', 'The directory path where to find Star genome index', 
             '/path/to/Star/index/dir')
    vars.Add('GENEPRED', 'The genome annotation in GenePred format', 'genes.genePred')
    vars.Add('CIRI_EXTRA_PARAMS', 'CIRI additional parameters', '')
    vars.Add('DCC_EXTRA_PARAMS', 'DCC additional parameters', '')

    vars.Add('CIRCRNA_METHODS', 'Comma separated list of circRNA detection methods to use. '\
	     'Use all methods available as default', '')
    vars.Add('CIRC_PE_MAPPING', 'By default, linearly unmapped reads are'\
            'collapsed into single-end reads to search for circRNA backsplices. Set'\
            'this option to "True" to force circRNA method aligners to'\
            'maintain paired-end read alignment', 'False')

    env = Environment(variables = vars,
                      ENV = os.environ)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Run sample: unknown variables", unknown.keys()
        Exit(1)

    env['READS'] = env['READS'].split(',')

    env['CIRCRNA_METHODS'] = [m.lower() for m in env['CIRCRNA_METHODS'].strip().split(',')]

    env.SetDefault(CIRC_PE_MAPPING = False)
    if env['CIRC_PE_MAPPING'].lower() == 'true':
        env.Replace(CIRC_PE_MAPPING = True)
    else:
        env.Replace(CIRC_PE_MAPPING = False)

SRC_DIR = os.path.join(env['ENV']['CIRCOMPARA_HOME'], 'src')

env.SetDefault(CIRC_PE_MAPPING = False)

results = []

sample_name = env['SAMPLE']

build_dir = 'circRNAs'

## GET INPUT READ FILE FULL PATH
raw_reads = [File(f).abspath for f in env['READS']]
if not env['CIRC_PE_MAPPING'] and len(env['READS']) > 1:
    cat_reads_target = os.path.join(build_dir, 
                                    env['SAMPLE'] + '.unmappedSE.fq')
    if env['READS'][0].endswith('.gz'): 
        cat_reads_target = cat_reads_target + '.gz'
    
    env['READS'] = env.Command(cat_reads_target, 
                               env['READS'], 
                               'cat ${SOURCES} > $TARGET')
    raw_reads = env['READS']


if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
   any([f in env['CIRCRNA_METHODS'] for f in ['testrealign', 'circexplorer2_segemehl']]):
    ## SEGEMEHL CIRCRNA
    env_segemehl = env.Clone()
    segemehl_cpus = env['CPUS']
    reads_to_map = raw_reads
    sample_id = sample_name
    segemehl_genome_fasta = env['GENOME_FASTA']
    segemehl_index = env['SEGEMEHL_INDEX']
    segemehl_extra_params = ''
    segemap = env.SConscript(os.path.join(build_dir, ccp_segemehl),
                             variant_dir = build_dir, 
                             src_dir = SRC_DIR,
                             duplicate = 0, 
                             exports='env_segemehl segemehl_cpus '\
                                     'reads_to_map sample_id '\
                                     'segemehl_genome_fasta segemehl_index '\
                                     'segemehl_extra_params')    
    results.append(segemap)
    env_testrealign = env.Clone()
    #mapping_file = segemap[0]
    env_testrealign['ALIGNMENTS'] = segemap[0][0]
    #env_testrealign['CPUS'] = CPUS
    #segemehlcirc_cpus = CPUS
    #segemehlcirc_genome_fasta = GENOME_FASTA
    #env_testrealign['GENOME_FASTA'] = GENOME_FASTA
    testrealign_dir = 'testrealign'
    testrealign = env.SConscript(os.path.join(build_dir, testrealign_dir, 
					      ccp_testrealign),
                              variant_dir = os.path.join(build_dir, 
							testrealign_dir), 
			      src_dir = SRC_DIR,
                              duplicate = 0, 
			      exports = '''env_testrealign''')
			      #exports = '''env_testrealign sample_name '''
					#'''segemehlcirc_cpus '''
					#'''segemehlcirc_genome_fasta''')

    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or 'testrealign' in \
	   env['CIRCRNA_METHODS']:
		results.append(testrealign)
	
    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
	   'circexplorer2_segemehl' in env['CIRCRNA_METHODS']:
        circexplorer2_env = env.Clone()
        circexplorer2_env['ALIGNER'] = 'segemehl'
        circexplorer2_env['FUSION_FILE'] = testrealign[0][0]
        circexplorer2_env['ALIGNMENTS'] = segemap[0][0]
        circexplorer2_segemehl = env.SConscript(os.path.join(build_dir,	
                                                             'ccp_circexplorer2.scons'),
                                                variant_dir = build_dir, src_dir = SRC_DIR,
                                                duplicate = 0,
                                                exports = '''circexplorer2_env''')
        results.append(circexplorer2_segemehl)

        Depends(circexplorer2_segemehl, testrealign)

if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
   'findcirc' in env['CIRCRNA_METHODS']:
    ## FIND_CIRC
    ccp_findcirc    = 'ccp_findcirc.scons'
   
    find_circ = env.SConscript(os.path.join(build_dir, ccp_findcirc),
                               variant_dir = build_dir, src_dir = SRC_DIR, 
                               duplicate = 0, 
                               exports = '''env''')
    results.append(find_circ)

if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
   any([f in env['CIRCRNA_METHODS'] for f in ['dcc', 'circexplorer2_star']]):

    ## alignments with STAR
    ## ALIGN WITH STAR, WITH FUSION SEARCH ENABLED
    star_env = env.Clone()
    ## set Star parameters to enable fusion search
    star_env.AppendUnique(STAR_PARAMS = ['--chimSegmentMin', '10', 
    			       '--chimOutType', 'WithinBAM'])
    
    star = env.SConscript(os.path.join(build_dir, 'ccp_star.scons'),
                          variant_dir = build_dir, src_dir = SRC_DIR,
                          duplicate = 0, 
    		      exports = '''star_env''')	
    results.append(star)
    
    Chimeric_out_junction = star[0][1]
    
    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
        'circexplorer2_star' in env['CIRCRNA_METHODS']:

        ## parse STAR alignments with CIRCexplorer2
        circexplorer2_env = env.Clone()
        circexplorer2_env['FUSION_FILE'] = Chimeric_out_junction
        circexplorer2_env['ALIGNER'] = 'star'
        circexplorer2_env['ALIGNMENTS'] = star[0][0]
        circexplorer2_star = env.SConscript(os.path.join(build_dir, 
        						'ccp_circexplorer2.scons'),
        			variant_dir = build_dir, src_dir = SRC_DIR,
                                    duplicate = 0,
        			exports = '''circexplorer2_env''')
        
        results.append(circexplorer2_star)	
        Depends(circexplorer2_star, star)

    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
        'dcc' in env['CIRCRNA_METHODS']:

        ## parse STAR alignments with DCC
        dcc_env = env.Clone()
        dcc_env['FUSION_FILE'] = Chimeric_out_junction
        #dcc_env['ALIGNER'] = 'star'
        dcc_env['ALIGNMENTS'] = star[0][0]
        dcc_env.AppendUnique(EXTRA_PARAMS = env['DCC_EXTRA_PARAMS'])

        dcc = env.SConscript(os.path.join(build_dir, 
        						'ccp_dcc.py'),
        			variant_dir = build_dir, src_dir = SRC_DIR,
                                  duplicate = 0,
        			exports = '''dcc_env''')
        
        results.append([File(f) for f in dcc.items()])	
        Depends(dcc.items(), star)


if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
	any([f in env['CIRCRNA_METHODS'] for f in ['circexplorer2_bwa', 'ciri']]):

    bwa_env = env.Clone()
    #bwa_env['CPUS'] = CPUS
    #bwa_env['READS'] = raw_reads
    #bwa_env['SAMPLE'] = sample_name
    #bwa_env['BWA_INDEX'] = BWA_INDEX
    #bwa_env['BWA_PARAMS'] = BWA_PARAMS 
   
    bwa = env.SConscript(os.path.join(build_dir, 'ccp_bwa.scons'), 
                          variant_dir = build_dir, src_dir = SRC_DIR, 
                          duplicate = 0, 
                          exports = 'bwa_env')
    
    results.append(bwa)

    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
	'circexplorer2_bwa' in env['CIRCRNA_METHODS']:

        RNA_seq_bwa_sam = bwa[0]
        ## parse BWA alignments with CIRCexplorer2
        circexplorer2_env = env.Clone()
        circexplorer2_env['FUSION_FILE'] = RNA_seq_bwa_sam
        circexplorer2_env['ALIGNER'] = 'BWA'
        circexplorer2_env['ALIGNMENTS'] = bwa[0]
        circexplorer2_bwa = env.SConscript(os.path.join(build_dir, 
        						'ccp_circexplorer2.scons'),
        			variant_dir = build_dir, src_dir = SRC_DIR,
                                duplicate = 0,
        			exports = '''circexplorer2_env''')
        
        results.append(circexplorer2_bwa)
        Depends(circexplorer2_bwa, bwa)

    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
       'ciri' in env['CIRCRNA_METHODS']:

        ## parse BWA alignments with CIRI
        env_ciri = env.Clone()
        env_ciri['BWA_ALIGN'] = bwa[0] 
        ciri = env.SConscript(os.path.join(build_dir, 'ccp_ciri.scons'), 
                              variant_dir = build_dir, src_dir = SRC_DIR, 
                              duplicate = 0, 
                              exports = 'env_ciri')
        
        results.append(ciri)
        Depends(ciri, bwa)

if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
	'circexplorer2_tophat' in env['CIRCRNA_METHODS'] or \
    'circexplorer2_tophat_pe' in env['CIRCRNA_METHODS']:

    ## align reads usign TopHat-Fusion
    env_tophat = env.Clone()
    env_tophat['TOPHAT_INDEX']  = env['BOWTIE_INDEX']
    env_tophat.AppendUnique(TOPHAT_PARAMS = ['--fusion-search', 
                                             '--keep-fasta-order',
		       	                             '--no-coverage-search',
                                             '--bowtie1'])
    if not env['ANNOTATION'] == '' and \
       not ('--GTF' in env_tophat['TOPHAT_PARAMS'] or '-G' in env_tophat['TOPHAT_PARAMS']):
	env_tophat.AppendUnique(TOPHAT_PARAMS = ['--GTF', env['ANNOTATION']])

    tophat = env.SConscript(os.path.join(build_dir, 'ccp_tophat.scons'),
                              variant_dir = build_dir, src_dir = SRC_DIR,
                              duplicate = 0, exports = '''env_tophat''')
    
    results.append(tophat['ALIGNMENTS'])
    results.append(tophat['MAPPED_READS'])

    ## parse TopHat alignments with CIRCexplorer2
    circexplorer2_env = env.Clone()
    circexplorer2_env['FUSION_FILE'] = tophat['ALIGNMENTS']
    circexplorer2_env['ALIGNER'] = 'tophat'
    circexplorer2_env['ALIGNMENTS'] = tophat['ALIGNMENTS']
    if env['CIRC_PE_MAPPING'] and len(env['READS']) > 1:
        circexplorer2_env.Replace(ALIGNER = 'tophat_pe')
    circexplorer2_tophat = env.SConscript(os.path.join(build_dir, 
    						'ccp_circexplorer2.scons'),
    			variant_dir = build_dir, src_dir = SRC_DIR,
                            duplicate = 0,
    			exports = '''circexplorer2_env''')
    
    results.append(circexplorer2_tophat)
    Depends(circexplorer2_tophat, tophat['ALIGNMENTS'])

Clean('.', build_dir)

Return('results')

'''
This SConscript performs circRNAs detection on a RNA-seq sample using different
circRNA detection methods.

Software dependencies are inherited from the CIRCOMPARA-SConscripts used:
 * ccp_testrealign
 * junk2_ciri
 * junk2_findcirc
 * junk2_tophat
 * junk2_bamtofastq

Imports:
 * env
 * sample_cpus
 * sample_genome_fasta
 * sample_annotation
 * sample_raw_reads
 * sample_segemehl_index
 * ciri_bwa_index
 * ciri_bwa_extra_parameters
 * ciri_script
 * ciri_extra_parameters
 * bowtie2_index
 * star_index
 * gene_pred

'''

import os

ccp_testrealign   = 'ccp_testrealign.scons'
junk2_ciri      = 'junk2_ciri'
ccp_segemehl = 'ccp_segemehl.scons'

Import('*')

try:
    env = env_sample_circrna_methods.Clone()
    CPUS         = sample_cpus
    GENOME_FASTA = sample_genome_fasta
    ANNOTATION   = sample_annotation
    READS        = sample_raw_reads
    env['READS'] = sample_raw_reads

    SEGEMEHL_INDEX = sample_segemehl_index

    BWA_INDEX    = ciri_bwa_index
    BWA_PARAMS   = ciri_bwa_extra_parameters
    CIRI         = ciri_script
    CIRI_EXTRA_PARAMS = ciri_extra_parameters

    BOWTIE2_INDEX = bowtie2_index
    env['BOWTIE2_INDEX'] = bowtie2_index

    STAR_INDEX = star_index
    GENEPRED   = gene_pred
    
    ## a list of circrna detection methods to use
    CIRCRNA_METHODS = circrna_methods

   #TODO
    PRE_FILTER  = False

except NameError:
    varfile = ARGUMENTS.get('VARS', 'vars.py')
    vars = Variables(varfile)
    vars.Add('CPUS', 'Set number of CPUs', '4')
    vars.Add('ANNOTATION', 'Gene annotation (Ensembl GTF)', '')
    vars.Add('GENOME_FASTA', 'The FASTA file with the reference genome', 'genome.fa')
    vars.Add('READS', 'RNA-seq reads. Comma separated list if paired-end', 'reads.fa')
    ## parameters for Segemehl/testrealign
    vars.Add('SEGEMEHL_INDEX', '''The .idx index for segemehl''', 'genome.idx')
    ## parameters for CIRI 
    vars.Add('BWA_INDEX', '''The index of the reference genome for BWA''','/path/to/bwa/index')
    vars.Add('BWA_PARAMS','Extra parameters for BWA','')
    vars.Add('CIRI', 'The full path to the CIRI_vx.x.pl perl script', '')
    ## parameters for find_circ
    vars.Add('BOWTIE2_INDEX', '''The index of the reference genome for BOWTIE2''', 
             '/path/to/bowtie2/index')
    vars.Add('BOWTIE_INDEX', '''The index of the reference genome for BOWTIE''', 
             '/path/to/bowtie/index')
   ## parameters for CIRCexplorer
    vars.Add('STAR_INDEX', 'The directory path where to find Star genome index', 
             '/path/to/Star/index/dir')
    vars.Add('GENEPRED', 'The genome annotation in GenePred format', 'genes.genePred')
    vars.Add('CIRI_EXTRA_PARAMS', 'CIRI additional parameters', '')

    vars.Add('CIRCRNA_METHODS', 'Comma separated list of circRNA detection methods to use. '\
	     'Use all methods available as default', '')

    env = Environment(variables = vars,
                      ENV = os.environ)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Run sample: unknown variables", unknown.keys()
        Exit(1)

    CPUS = env['CPUS']
    GENOME_FASTA = env['GENOME_FASTA']
    ANNOTATION = env['ANNOTATION']
    READS = env['READS'].split(',')
    
    ## parameters for Segemehl/testrealign
    SEGEMEHL_INDEX = env['SEGEMEHL_INDEX']

    ## parameters for CIRI
    BWA_INDEX = env['BWA_INDEX']
    BWA_PARAMS = env['BWA_PARAMS']
    CIRI = env['CIRI']
    CIRI_EXTRA_PARAMS = env['CIRI_EXTRA_PARAMS']
    
    ## parameters for find_circ
    BOWTIE2_INDEX = env['BOWTIE2_INDEX']
    
    ## parameters for CIRCexplorer
    STAR_INDEX = env['STAR_INDEX']
    GENEPRED   = env['GENEPRED']

    CIRCRNA_METHODS = [m.lower() for m in env['CIRCRNA_METHODS'].strip().split(',')]


SRC_DIR = os.path.join(env['ENV']['CIRCOMPARA_HOME'], 'src')

results = []

## GET INPUT READ FILE FULL PATH
raw_reads = [File(f).abspath for f in READS]

#sample_name = os.path.basename(Dir('.').path)
#if sample_name=='.':
#    sample_name = os.path.basename(Dir('.').abspath)
sample_name = env['SAMPLE']

### RETIRIEVE CANONICALLY UNMAPPED READS
unmapped_reads_dir = 'unmapped_reads'

build_dir = 'circRNAs'

if CIRCRNA_METHODS == [''] or CIRCRNA_METHODS == '' or \
   any([f in CIRCRNA_METHODS for f in ['testrealign', 'circexplorer2_segemehl']]):

    ## SEGEMEHL CIRCRNA
    env_segemehl = env.Clone()
    segemehl_cpus = CPUS
    reads_to_map = raw_reads
    sample_id = sample_name
    segemehl_genome_fasta = GENOME_FASTA
    segemehl_index = SEGEMEHL_INDEX
    segemehl_extra_params = ''
    segemap = env.SConscript(os.path.join(build_dir, ccp_segemehl),
                             variant_dir = build_dir, src_dir = SRC_DIR,
                             duplicate = 0, exports='env_segemehl segemehl_cpus reads_to_map sample_id segemehl_genome_fasta segemehl_index segemehl_extra_params')

    results.append(segemap)    

    env_testrealign = env.Clone()
    #mapping_file = segemap[0]
    env_testrealign['ALIGNMENTS'] = segemap[0]
    segemehlcirc_cpus = CPUS
    segemehlcirc_genome_fasta = GENOME_FASTA
    testrealign_dir = 'testrealign'
    testrealign = env.SConscript(os.path.join(build_dir, testrealign_dir, 
					      ccp_testrealign),
                              variant_dir = os.path.join(build_dir, 
							testrealign_dir), 
			      src_dir = SRC_DIR,
                              duplicate = 0, 
			      exports = '''env_testrealign sample_name '''
					'''segemehlcirc_cpus '''
					'''segemehlcirc_genome_fasta''')

    if CIRCRNA_METHODS == [''] or CIRCRNA_METHODS == '' or 'testrealign' in \
	   CIRCRNA_METHODS:
		results.append(testrealign)
	
    if CIRCRNA_METHODS == [''] or CIRCRNA_METHODS == '' or \
	   'circexplorer2_segemehl' in CIRCRNA_METHODS:
		circexplorer2_env = env.Clone()
		circexplorer2_env['ALIGNER'] = 'segemehl'
		circexplorer2_env['FUSION_FILE'] = testrealign[0][0]
		circexplorer2_segemehl = env.SConscript(os.path.join(build_dir,	
							'ccp_circexplorer2.scons'),
					variant_dir = build_dir, src_dir = SRC_DIR,
	                                duplicate = 0,
					exports = '''circexplorer2_env''')
		
		results.append(circexplorer2_segemehl)

		Depends(circexplorer2_segemehl, testrealign)

if CIRCRNA_METHODS == [''] or CIRCRNA_METHODS == '' or 'findcirc' in CIRCRNA_METHODS:
    ## FIND_CIRC
    junk2_findcirc    = 'junk2_findcirc'
    find_circ_cpus    = CPUS
    find_circ_bt2_idx = BOWTIE2_INDEX
    find_circ_reads   = raw_reads
    find_circ_genome  = GENOME_FASTA
    find_circ_sample  = sample_name
    
    find_circ = env.SConscript(os.path.join(build_dir, junk2_findcirc),
                               variant_dir = build_dir, src_dir = SRC_DIR, 
                               duplicate = 0, 
                               exports = '''env find_circ_cpus find_circ_bt2_idx find_circ_reads '''\
                                         '''find_circ_genome find_circ_sample''')
    results.append(find_circ)

if CIRCRNA_METHODS == [''] or CIRCRNA_METHODS == '' or 'circexplorer2_star' in CIRCRNA_METHODS:
	## alignments with STAR
	## ALIGN WITH STAR, WITH FUSION SEARCH ENABLED
	star_env            = env.Clone()
	## set Star parameters to enable fusion search
	star_env.Append(STAR_PARAMS = ['--chimSegmentMin', '10', 
				       '--chimOutType', 'WithinBAM'])
	
	star = env.SConscript(os.path.join(build_dir, 'ccp_star.scons'),
	                      variant_dir = build_dir, src_dir = SRC_DIR,
	                      duplicate = 0, 
			      exports = '''star_env''')	
	results.append(star)
	
	Chimeric_out_junction = star[0][1]

	## parse STAR alignments with CIRCexplorer2
	circexplorer2_env = env.Clone()
	circexplorer2_env['FUSION_FILE'] = Chimeric_out_junction
	circexplorer2_env['ALIGNER'] = 'star'
	circexplorer2_star = env.SConscript(os.path.join(build_dir, 
							'ccp_circexplorer2.scons'),
				variant_dir = build_dir, src_dir = SRC_DIR,
                                duplicate = 0,
				exports = '''circexplorer2_env''')

	results.append(circexplorer2_star)	
	Depends(circexplorer2_star, star)

if CIRCRNA_METHODS == [''] or CIRCRNA_METHODS == '' or \
	any([f in CIRCRNA_METHODS for f in ['circexplorer2_bwa', 'ciri']]):

    bwa_env = env.Clone()
    bwa_env['CPUS'] = CPUS
    bwa_env['READS'] = raw_reads
    bwa_env['SAMPLE'] = sample_name
    bwa_env['BWA_INDEX'] = BWA_INDEX
    bwa_env['BWA_PARAMS'] = BWA_PARAMS 
   
    bwa = env.SConscript(os.path.join(build_dir, 'ccp_bwa.scons'), 
                          variant_dir = build_dir, src_dir = SRC_DIR, 
                          duplicate = 0, 
                          exports = 'bwa_env')
    
    results.append(bwa)

    if CIRCRNA_METHODS == [''] or CIRCRNA_METHODS == '' or \
	'circexplorer2_bwa' in CIRCRNA_METHODS:

        RNA_seq_bwa_sam = bwa[0]
        ## parse BWA alignments with CIRCexplorer2
        circexplorer2_env = env.Clone()
        circexplorer2_env['FUSION_FILE'] = RNA_seq_bwa_sam
        circexplorer2_env['ALIGNER'] = 'BWA'
        circexplorer2_bwa = env.SConscript(os.path.join(build_dir, 
        						'ccp_circexplorer2.scons'),
        			variant_dir = build_dir, src_dir = SRC_DIR,
                                duplicate = 0,
        			exports = '''circexplorer2_env''')
        
        results.append(circexplorer2_bwa)
        Depends(circexplorer2_bwa, bwa)

    if CIRCRNA_METHODS == [''] or CIRCRNA_METHODS == '' or 'ciri' in CIRCRNA_METHODS:

        ## parse BWA alignments with CIRI
        env_ciri = env.Clone()
        env_ciri['BWA_ALIGN'] = bwa[0] 
        ciri = env.SConscript(os.path.join(build_dir, 'ccp_ciri.scons'), 
                              variant_dir = build_dir, src_dir = SRC_DIR, 
                              duplicate = 0, 
                              exports = 'env_ciri')
        
        results.append(ciri)
        Depends(ciri, bwa)

if CIRCRNA_METHODS == [''] or CIRCRNA_METHODS == '' or \
	'circexplorer2_tophat' in CIRCRNA_METHODS or \
    'circexplorer2_tophat_pe' in CIRCRNA_METHODS:

    ## align reads usign TopHat-Fusion
    env_tophat = env.Clone()
    env_tophat['TOPHAT_INDEX']  = env['BOWTIE_INDEX']
    env_tophat.AppendUnique(TOPHAT_PARAMS = ['--fusion-search', 
                                             '--keep-fasta-order',
		       	                     '--no-coverage-search',
                                             '--bowtie1'])
    if not env['ANNOTATION'] == '' and \
       not ('--GTF' in env_tophat['TOPHAT_PARAMS'] or '-G' in env_tophat['TOPHAT_PARAMS']):
	env_tophat.AppendUnique(TOPHAT_PARAMS = ['--GTF', env['ANNOTATION']])

    tophat = env.SConscript(os.path.join(build_dir, 'ccp_tophat.scons'),
                              variant_dir = build_dir, src_dir = SRC_DIR,
                              duplicate = 0, exports = '''env_tophat''')
    
    results.append(tophat['ALIGNMENTS'])
    results.append(tophat['MAPPED_READS'])

    ## parse TopHat alignments with CIRCexplorer2
    circexplorer2_env = env.Clone()
    circexplorer2_env['FUSION_FILE'] = tophat['ALIGNMENTS']
    circexplorer2_env['ALIGNER'] = 'tophat'
    if len(env['READS']) > 1:
       circexplorer2_env.Replace(ALIGNER = 'tophat_pe')
    circexplorer2_tophat = env.SConscript(os.path.join(build_dir, 
    						'ccp_circexplorer2.scons'),
    			variant_dir = build_dir, src_dir = SRC_DIR,
                            duplicate = 0,
    			exports = '''circexplorer2_env''')
    
    results.append(circexplorer2_tophat)
    Depends(circexplorer2_tophat, tophat['ALIGNMENTS'])


Clean('.', build_dir)
Clean('.', unmapped_reads_dir)

Return('results')

'''
This SConscript performs circRNAs detection on a RNA-seq sample using different
circRNA detection methods.

Software dependencies are inherited from the CIRCOMPARA-SConscripts used:
 * ccp_testrealign.scons
 * ccp_ciri.scons
 * ccp_findcirc.scons
 * ccp_tophat.scons

Imports:
 * env
 * sample_cpus
 * sample_genome_fasta
 * sample_annotation
 * sample_raw_reads
 * sample_segemehl_index
 * ciri_bwa_index
 * ciri_bwa_extra_parameters
 * ciri_script
 * ciri_extra_parameters
 * bowtie2_index
 * star_index
 * gene_pred

'''

import os

ccp_testrealign   = 'ccp_testrealign.scons'
ccp_segemehl = 'ccp_segemehl.scons'

Import('*')

try:
    env = env_sample_circrna_methods.Clone()
   #TODO
    PRE_FILTER  = False

except NameError:
    varfile = ARGUMENTS.get('VARS', 'vars.py')
    vars = Variables(varfile)
    vars.Add('CPUS', 'Set number of CPUs', '4')
    vars.Add('ANNOTATION', 'Gene annotation (Ensembl GTF)', '')
    vars.Add('GENOME_FASTA', 'The FASTA file with the reference genome', 'genome.fa')
    vars.Add('READS', 'RNA-seq reads. Comma separated list if paired-end', 'reads.fa')
    ## parameters for Segemehl/testrealign
    vars.Add('SEGEMEHL_INDEX', '''The .idx index for segemehl''', 'genome.idx')
    ## parameters for CIRI 
    vars.Add('BWA_INDEX', '''The index of the reference genome for BWA''','/path/to/bwa/index')
    vars.Add('BWA_PARAMS','Extra parameters for BWA','')
    vars.Add('CIRI', 'The full path to the CIRI_vx.x.pl perl script', '')
    ## parameters for find_circ
    vars.Add('BOWTIE2_INDEX', '''The index of the reference genome for BOWTIE2''', 
             '/path/to/bowtie2/index')
    vars.Add('BOWTIE_INDEX', '''The index of the reference genome for BOWTIE''', 
             '/path/to/bowtie/index')
   ## parameters for CIRCexplorer
    vars.Add('STAR_INDEX', 'The directory path where to find Star genome index', 
             '/path/to/Star/index/dir')
    vars.Add('GENEPRED', 'The genome annotation in GenePred format', 'genes.genePred')
    vars.Add('CIRI_EXTRA_PARAMS', 'CIRI additional parameters', '')
    vars.Add('DCC_EXTRA_PARAMS', 'DCC additional parameters', '')

    vars.Add('CIRCRNA_METHODS', 'Comma separated list of circRNA detection methods to use. '\
	     'Use all methods available as default', '')
    vars.Add('CIRC_PE_MAPPING', 'By default, linearly unmapped reads are'\
            'collapsed into single-end reads to search for circRNA backsplices. Set'\
            'this option to "True" to force circRNA method aligners to'\
            'maintain paired-end read alignment', 'False')

    env = Environment(variables = vars,
                      ENV = os.environ)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Run sample: unknown variables", unknown.keys()
        Exit(1)

    env['READS'] = env['READS'].split(',')

    env['CIRCRNA_METHODS'] = [m.lower() for m in env['CIRCRNA_METHODS'].strip().split(',')]

    env.SetDefault(CIRC_PE_MAPPING = False)
    if env['CIRC_PE_MAPPING'].lower() == 'true':
        env.Replace(CIRC_PE_MAPPING = True)
    else:
        env.Replace(CIRC_PE_MAPPING = False)

SRC_DIR = os.path.join(env['ENV']['CIRCOMPARA_HOME'], 'src')

env.SetDefault(CIRC_PE_MAPPING = False)

results = []

## default values when method is not set
segemap = None
star = None
bwa = None
tophat = None
circexplorer2_bwa = None
circexplorer2_tophat = None
circexplorer2_segemehl = None
circexplorer2_star = None
ciri = None
find_circ = None
testrealign = None
dcc = None
cfinder = None

sample_name = env['SAMPLE']

env.SetDefault(FIX_READ_HEADER = True)

build_dir = 'circRNAs'

## PREPARE CIRCRNA METHODS' INPUT READS
if env['CIRC_PE_MAPPING']:
   ## TODO:
   print 'CIRC_PE_MAPPING not yet implemented :('
   exit(-1)
else:
    ## collapse paired reads into single file
    ## indeed processing reads as they were single-end
    cat_reads_target = os.path.join(build_dir,  
                                    env['SAMPLE'] + '.unmappedSE.fq.gz')
    
    ## we can concatenate gzipped files, no need to decompress
    cat_cmd = 'cat ${SOURCES} '

    if env['FIX_READ_HEADER']:
        ## trim FASTQ header to the first white space, so
        ## that only the read ids are kept in FASTQ headers.
        ## This prevents errors in downstream read processing.
        ## Recommended for SRA read datasets, which usually
        ## report read length and other info in FASTQ header.
        ## Plus, append suffix to read ids in order to discriminate
        ## mate reads after concatenation.
        cat_cmd = '''trim_read_header.py -s '\\' -f ${SOURCES[0]} '''

        if len(env['READS']) > 1:
            cat_cmd = cat_cmd + '''-r ${SOURCES[1]} '''

        cat_cmd = cat_cmd + '''| gzip -c '''

    unmapped_reads = env.Command(cat_reads_target,
                               env['READS'],
                               cat_cmd + '> $TARGET')

    env.Replace(READS = unmapped_reads)

if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
   any([f in env['CIRCRNA_METHODS'] for f in ['testrealign', 'circexplorer2_segemehl']]):
    ## SEGEMEHL CIRCRNA
    env_segemehl = env.Clone()
    segemap = env.SConscript(os.path.join(build_dir, ccp_segemehl),
                             variant_dir = build_dir, 
                             src_dir = SRC_DIR,
                             duplicate = 0, 
                             exports='env_segemehl')

    Depends(segemap['ALIGNMENTS'], env['READS'])

    ## segemehl Sconscript result keys:
    #'ALIGNMENTS'
    #'UNALIGNED_READS'
    #'SINGLE_SPLITS'
    #'MULTI_SPLITS'
    #'TRANS_SPLIT'
    #'MAPPED_READS' 
    results.append([File(f) for f in segemap.iteritems()])


    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or 'testrealign' in \
	   env['CIRCRNA_METHODS']:

        env_testrealign = env.Clone()
        env_testrealign['BED'] = segemap['SINGLE_SPLITS']
        testrealign_dir = 'testrealign'
        testrealign = env.SConscript(os.path.join(build_dir, testrealign_dir, 
                                                  ccp_testrealign),
                                     variant_dir = os.path.join(build_dir, 
                                                                testrealign_dir), 
                                     src_dir = SRC_DIR,
                                     duplicate = 0, 
                                     exports = '''env_testrealign''')
        results.append(testrealign.values())
	
    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
	   'circexplorer2_segemehl' in env['CIRCRNA_METHODS']:
        circexplorer2_env = env.Clone()
        circexplorer2_env['ALIGNER'] = 'segemehl'
        circexplorer2_env['FUSION_FILE'] = segemap['SINGLE_SPLITS']
        circexplorer2_env['ALIGNMENTS'] = segemap['ALIGNMENTS']
        circexplorer2_segemehl = env.SConscript(os.path.join(build_dir,	
                                                             'ccp_circexplorer2.scons'),
                                                variant_dir = build_dir, src_dir = SRC_DIR,
                                                duplicate = 0,
                                                exports = '''circexplorer2_env''')
        results.append(circexplorer2_segemehl.values())


if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
   'findcirc' in env['CIRCRNA_METHODS']:
    ## FIND_CIRC
    ccp_findcirc    = 'ccp_findcirc.scons'
   
    find_circ = env.SConscript(os.path.join(build_dir, ccp_findcirc),
                               variant_dir = build_dir, src_dir = SRC_DIR, 
                               duplicate = 0, 
                               exports = '''env''')

    Depends(find_circ.values(), env['READS'])
    
    results.append(find_circ.values())

if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
   any([f in env['CIRCRNA_METHODS'] for f in ['dcc', 
                                              'circexplorer2_star',
                                              'circrna_finder']]):

    ## alignments with STAR
    ## ALIGN WITH STAR, WITH FUSION SEARCH ENABLED
    star_env = env.Clone()
    ## set Star parameters to enable fusion search
    star_env.AppendUnique(STAR_PARAMS = ['--chimSegmentMin', '10', 
                                         '--chimOutType', 'Junctions', 'SeparateSAMold'])
    
    star = env.SConscript(os.path.join(build_dir, 'ccp_star.scons'),
                          variant_dir = build_dir, src_dir = SRC_DIR,
                          duplicate = 0, 
    		      exports = '''star_env''')	

    Depends(star, env['READS'])
    
    results.append(star)
    
    Chimeric_out_junction = star[0][1]
    Chimeric_out_sam = star[0][6]
    
    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
        'circexplorer2_star' in env['CIRCRNA_METHODS']:

        ## parse STAR alignments with CIRCexplorer2
        circexplorer2_env = env.Clone()
        circexplorer2_env['FUSION_FILE'] = Chimeric_out_junction
        circexplorer2_env['ALIGNER'] = 'star'
        circexplorer2_env['ALIGNMENTS'] = Chimeric_out_sam #star[0][0]
        circexplorer2_star = env.SConscript(os.path.join(build_dir, 
        						'ccp_circexplorer2.scons'),
        			variant_dir = build_dir, src_dir = SRC_DIR,
                                    duplicate = 0,
        			exports = '''circexplorer2_env''')
        
        results.append(circexplorer2_star.values())	
        Depends(circexplorer2_star.values(), star)

    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
        'dcc' in env['CIRCRNA_METHODS']:

        ## parse STAR alignments with DCC
        dcc_env = env.Clone()
        dcc_env['FUSION_FILE'] = Chimeric_out_junction
        dcc_env['ALIGNMENTS'] = Chimeric_out_sam #star[0][0]
        #dcc_env.AppendUnique(EXTRA_PARAMS = env['DCC_EXTRA_PARAMS'])
        ## AppendUnique will fail to correctly add multi-value options
        ## such as -Nr 1 1, since it will not repeat identical values
        dcc_env.Append(EXTRA_PARAMS = env['DCC_EXTRA_PARAMS'])

        dcc = env.SConscript(os.path.join(build_dir, 
        						'ccp_dcc.py'),
        			variant_dir = build_dir, src_dir = SRC_DIR,
                                  duplicate = 0,
        			exports = '''dcc_env''')
        
        results.append([File(f) for f in dcc.values()])	
        Depends(dcc.values(), star)

    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
        'circrna_finder' in env['CIRCRNA_METHODS']:

        ## parse STAR alignments with circrna-finder
        cfinder_env = env.Clone()
        ## circrna-finder uses old version of samtools  ( < v1.0 ) 
        cfinder_env.PrependENVPath('PATH', os.path.join(env['ENV']['CIRCOMPARA_HOME'],
                                                        'bin', 'samtools_v0'))
        cfinder_env['FUSION_FILE'] = Chimeric_out_sam
        cfinder_env['ALIGNMENTS'] = Chimeric_out_junction #Chimeric_out_sam
        cfinder_env.Append(EXTRA_PARAMS = env['CFINDER_EXTRA_PARAMS'])

        cfinder = env.SConscript(os.path.join(build_dir, 
        						'ccp_circrna_finder.py'),
        			variant_dir = build_dir, src_dir = SRC_DIR,
                                  duplicate = 0,
        			exports = '''cfinder_env''')
        
        results.append([File(f) for f in cfinder.values()])	
        Depends(cfinder.values(), star)

if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
	any([f in env['CIRCRNA_METHODS'] for f in ['circexplorer2_bwa', 'ciri']]):

    bwa_env = env.Clone()
  
    bwa = env.SConscript(os.path.join(build_dir, 'ccp_bwa.scons'), 
                          variant_dir = build_dir, src_dir = SRC_DIR, 
                          duplicate = 0, 
                          exports = 'bwa_env')
    
    Depends(bwa, env['READS'])

    results.append(bwa)

    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
       'circexplorer2_bwa' in env['CIRCRNA_METHODS']:

        RNA_seq_bwa_sam = bwa[0]
        ## parse BWA alignments with CIRCexplorer2
        circexplorer2_env = env.Clone()
        circexplorer2_env['FUSION_FILE'] = RNA_seq_bwa_sam
        circexplorer2_env['ALIGNER'] = 'BWA'
        circexplorer2_env['ALIGNMENTS'] = bwa[0]
        circexplorer2_bwa = env.SConscript(os.path.join(build_dir, 
        						'ccp_circexplorer2.scons'),
        			variant_dir = build_dir, src_dir = SRC_DIR,
                                duplicate = 0,
        			exports = '''circexplorer2_env''')
        
        results.append(circexplorer2_bwa.values())
        Depends(circexplorer2_bwa.values(), bwa)

    if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
       'ciri' in env['CIRCRNA_METHODS']:

        ## parse BWA alignments with CIRI
        env_ciri = env.Clone()
        env_ciri['BWA_ALIGN'] = bwa[0] 
        ciri = env.SConscript(os.path.join(build_dir, 'ccp_ciri.scons'), 
                              variant_dir = build_dir, src_dir = SRC_DIR, 
                              duplicate = 0, 
                              exports = 'env_ciri')
        
        results.append(ciri.values())
        Depends(ciri.values(), bwa)

if env['CIRCRNA_METHODS'] == [''] or env['CIRCRNA_METHODS'] == '' or \
	'circexplorer2_tophat' in env['CIRCRNA_METHODS'] or \
    'circexplorer2_tophat_pe' in env['CIRCRNA_METHODS']:

    ## align reads usign TopHat-Fusion
    env_tophat = env.Clone()
    env_tophat['TOPHAT_INDEX']  = env['BOWTIE_INDEX']
    env_tophat.AppendUnique(TOPHAT_PARAMS = ['--fusion-search', 
                                             '--keep-fasta-order',
		       	                             '--no-coverage-search',
                                             '--bowtie1'])
    if not env['ANNOTATION'] == '' and \
       not ('--GTF' in env_tophat['TOPHAT_PARAMS'] or '-G' in env_tophat['TOPHAT_PARAMS']):
	env_tophat.AppendUnique(TOPHAT_PARAMS = ['--GTF', env['ANNOTATION']])

    tophat = env.SConscript(os.path.join(build_dir, 'ccp_tophat.scons'),
                              variant_dir = build_dir, src_dir = SRC_DIR,
                              duplicate = 0, exports = '''env_tophat''')
    
    Depends(tophat['ALIGNMENTS'], env['READS'])

    results.append(tophat['ALIGNMENTS'])
    results.append(tophat['MAPPED_READS'])

    ## parse TopHat alignments with CIRCexplorer2
    circexplorer2_env = env.Clone()
    circexplorer2_env['FUSION_FILE'] = tophat['ALIGNMENTS']
    circexplorer2_env['ALIGNER'] = 'tophat'
    circexplorer2_env['ALIGNMENTS'] = tophat['ALIGNMENTS']
    if env['CIRC_PE_MAPPING'] and len(env['READS']) > 1:
        circexplorer2_env.Replace(ALIGNER = 'tophat_pe')
    circexplorer2_tophat = env.SConscript(os.path.join(build_dir, 
    						'ccp_circexplorer2.scons'),
    			variant_dir = build_dir, src_dir = SRC_DIR,
                            duplicate = 0,
    			exports = '''circexplorer2_env''')
    
    results.append(circexplorer2_tophat.values())
    Depends(circexplorer2_tophat.values(), tophat['ALIGNMENTS'])

Clean('.', build_dir)

circ_met_dict = {'CE2_BWA': circexplorer2_bwa,
                 'CE2_TH' : circexplorer2_tophat,
                 'CE2_SE' : circexplorer2_segemehl,
                 'CE2_ST' : circexplorer2_star,
                 'CIRI'   : ciri,
                 'FC'     : find_circ,
                 'TR'     : testrealign,
                 'DCC'    : dcc,
                 'CFINDER': cfinder
                }

circ_aln_dict = {'SEGEMEHL_MAP' : segemap,
                 'STAR_MAP'     : star,
                 'BWA_MAP'      : bwa, 
                 'TOPHAT_MAP'   : tophat
                }

results_dict = {'CIRC_METHODS': circ_met_dict,
                'CIRC_ALIGNERS':circ_aln_dict
               }
Return('results results_dict')

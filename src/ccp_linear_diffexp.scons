import os, csv, itertools, collections, re, errno
from collections import defaultdict

Import('*')

try:
    env = env_linear_diffexp.Clone()
except NameError:
    varfile = ARGUMENTS.get('VARS', 'vars.py')
    vars = Variables(varfile)
    vars.Add('DIFF_EXP', '', '')
    vars.Add('META', '', '')
    vars.Add('CPUS', '', '')
    vars.Add('EXTRA_PARAMS', '', '')
    vars.Add('SCONSCRIPT_HOME', '', '')
    vars.Add('STRANDNESS_PARAMS', '', '')
    vars.Add('EXPRESSION_FILES', '', '')

    env = Environment(variables = vars,
                      ENV = os.environ)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

conditions  = defaultdict(set)

with open(env['META']) as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        conditions[row['condition']].add(row['sample'])

env['SAMPLES'] = Flatten([list(s) for s in conditions.values()])

#deseq_annotation = cuffmerge
#deseq_alignments = get_matching_nodes(runs, alignment_matching_regexp)
#metafile = File(env['META']).abspath
#deseq_cpus = env['CPUS']
#deseq_stranded = 'no'
#if 'fr-firststrand' in env['CUFFLINKS_PARAMS']:
#	deseq_stranded = 'yes'
#else:
#	deseq_stranded = 'no'


if len(conditions.keys()) > 1:
    
    ## PREPARE VARIABLES FOR BALLGOWN
    if 'ballgown' in env['DIFF_EXP']:
        diffexp_sconscript = 'ccp_ballgown.scons'
        diffexp_dir = 'ballgown'

        bg_dirs = {}
        for sample in env['SAMPLES']:

            rexpr = '.*' + os.path.sep + sample + os.path.sep + '.*\.ctab'
            sample_ctabs = get_matching_nodes(env['EXPRESSION_FILES'], 
                                              rexpr)
            sample_link = os.path.join(diffexp_dir, sample)
            bg_dirs[sample] = env.Command(sample_link,
                                          sample_ctabs[0].dir,
                                          SymLink)
        
        env.Replace(EXPRESSION_FILES = bg_dirs)

    ## PREPARE VARIABLES FOR CUFFDIFF
    if 'cuffdiff' in env['DIFF_EXP']:
        diffexp_sconscript = 'ccp_cuffdiff.scons'
        diffexp_dir = 'cuffdiff'
        env.Replace(EXTRA_PARAMS = env['CUFFDIFF_EXTRA_PARAMS'])
        env['CONDITIONS'] = conditions
        
    
    ## PREPARE VARIABLES FOR DESEQ
    if 'deseq' in env['DIFF_EXP']:
        diffexp_sconscript = 'ccp_DESeq.scons'
        diffexp_dir = 'DESeq2'

        #deseq = SConscript(os.path.join(deseq_dir, 'ccp_DESeq.scons'),
        #					src_dir = env['SCONSCRIPT_HOME'],
        #					variant_dir = deseq_dir, duplicate = 0,
        #                    exports = '''env deseq_annotation deseq_alignments '''
        #                            '''metafile deseq_cpus deseq_stranded ''')
        #Depends(deseq, [cuffmerge, alignments])
    
    ## COMPUTE DIFFERENTIAL EXPRESSION
    diffexp = SConscript(os.path.join(diffexp_dir, diffexp_sconscript),
                     src_dir = env['SCONSCRIPT_HOME'],
                     variant_dir = diffexp_dir, duplicate = 0,
                     exports = '''env''')


    ## MAKE DIFFERENTIAL LINEAR EXPRESSION REPORT
    #gene_exp = get_matching_nodes(cuffdiff, ".*genes.read_group_tracking")
    #gene_meta = File(get_matching_nodes(cuffdiff, ".*read_groups.info")[0]).abspath
    #
    #gene_diffexp = get_matching_nodes(cuffdiff, ".*gene_exp.diff") 
    #cuffdiff_gene_diffexp_analysis_template = os.path.join("$SCONSCRIPT_HOME", 
    #							"cuffdiff_gene_diffexp.Rmd")
    #report_cuffdiff_target = [os.path.join(os.path.dirname(gene_diffexp[0].path), 
    #		     	  	       "cuffdiff_gene_diffexp.html")]
    #report_cuffdiff_cmd = '''Rscript -e 'results.dir <- dirname("${SOURCES[0].abspath}"); '''\
    #	                '''meta.file <- "''' + str(gene_meta) + '''"; '''\
    #                    '''gene.de.file <- "${SOURCES[0].abspath}"; '''\
    #                    '''rmarkdown::render(input = "''' + \
    #                    str(cuffdiff_gene_diffexp_analysis_template) + '''", '''\
    #	                '''output_file = "$TARGET.abspath", '''\
    #	                '''intermediates_dir = dirname("${SOURCES[0].abspath}") )' '''
    #report_cuffdiff = env.Command(report_cuffdiff_target, 
    #                            [gene_diffexp],
    #                            report_cuffdiff_cmd)

else:
    print "No conditions to contrast in differential linear expression analysis"




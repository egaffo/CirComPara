import os, csv, itertools, collections, re, errno
from collections import defaultdict

Import('*')

try:
    env = env_linear_diffexp.Clone()
except NameError:
    varfile = ARGUMENTS.get('VARS', 'vars.py')
    vars = Variables(varfile)
    vars.Add('DIFF_EXP', '', '')
    vars.Add('META', '', '')
    vars.Add('CPUS', '', '')
    vars.Add('EXTRA_PARAMS', '', '')
    vars.Add('SCONSCRIPT_HOME', '', '')
    vars.Add('EXPRESSION_FILES', '', '')

    env = Environment(variables = vars,
                      ENV = os.environ)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

conditions  = defaultdict(set)

with open(env['META']) as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        conditions[row['condition']].add(row['sample'])

env['SAMPLES'] = Flatten([list(s) for s in conditions.values()])

if len(conditions.keys()) > 1:
    
    ## PREPARE VARIABLES FOR BALLGOWN
    if 'ballgown' in env['DIFF_EXP']:
        diffexp_sconscript = 'ccp_ballgown.scons'
        diffexp_dir = 'ballgown'

        bg_dirs = {}
        for sample in env['SAMPLES']:

            rexpr = '.*' + os.path.sep + sample + os.path.sep + '.*\.ctab'
            sample_ctabs = get_matching_nodes(env['EXPRESSION_FILES'], 
                                              rexpr)
            sample_link = os.path.join(diffexp_dir, sample)
            bg_dirs[sample] = env.Command(sample_link,
                                          sample_ctabs[0].dir,
                                          SymLink)
        
        env.Replace(EXPRESSION_FILES = bg_dirs)

        report_template = 'ballgown_gene_diffexp.Rmd'

    ## PREPARE VARIABLES FOR CUFFDIFF
    if 'cuffdiff' in env['DIFF_EXP']:
        diffexp_sconscript = 'ccp_cuffdiff.scons'
        diffexp_dir = 'cuffdiff'
        env.Replace(EXTRA_PARAMS = env['CUFFDIFF_EXTRA_PARAMS'])
        env['CONDITIONS'] = conditions
        
        report_template = "cuffdiff_gene_diffexp.Rmd"
        
   
    ## PREPARE VARIABLES FOR DESEQ
    if 'deseq' in env['DIFF_EXP']:
        diffexp_sconscript = 'ccp_DESeq.scons'
        diffexp_dir = 'DESeq2'
        
        report_template = 'DESeq_gene_diffexp.Rmd'
        

    ## COMPUTE DIFFERENTIAL EXPRESSION
    diffexp = SConscript(os.path.join(diffexp_dir, diffexp_sconscript),
                     src_dir = env['SCONSCRIPT_HOME'],
                     variant_dir = diffexp_dir, duplicate = 0,
                     exports = '''env''')

    ## MAKE DIFFERENTIAL LINEAR EXPRESSION REPORT
    gene_exp = diffexp['GENE_EXPRESSION']
    gene_meta = diffexp['META']
    gene_diffexp = diffexp['GENE_DIFF_TESTS']

    gene_diffexp_analysis_template = os.path.join("$SCONSCRIPT_HOME", 
    							report_template)
    report_cuffdiff_target = [report_template.split('.')[0] + ".html",
                              'DEG_tests_by_contrast.csv']
    report_cuffdiff_cmd = '''Rscript -e 'results.dir <- dirname("${TARGETS[1].abspath}"); '''\
    	                '''meta.file <- "${SOURCES[1].abspath}"; '''\
                        '''child.Rmd <- file.path("$SCONSCRIPT_HOME", "_lindiffexp.Rmd"); '''\
                        '''gene.de.file <- "${SOURCES[0].abspath}"; '''\
                        '''rmarkdown::render(input = "''' + \
                        str(gene_diffexp_analysis_template) + '''", '''\
    	                '''output_file = "${TARGETS[0].abspath}", '''\
    	                '''intermediates_dir = "${TARGETS[0].dir}" )' '''
    report_cuffdiff = env.Command(report_cuffdiff_target, 
                                [gene_diffexp, gene_meta],
                                report_cuffdiff_cmd)

else:
    print "No conditions to contrast in differential linear expression analysis"


Return('diffexp')

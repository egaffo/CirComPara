'''

This is a SConscript script that executes the tasks necessary to find 
circular RNA junctions from RNA-seq data, according to the procedure 
described in:

    Gao, Y., Wang, J. & Zhao, F. 
    
    CIRI: an efficient and unbiased algorithm for de novo circular RNA
    identification. 
    
    Genome Biology 16, 4 (2015).

Download the scripts from http://sourceforge.net/projects/ciri

Software dependencies:
 * BWA
 * Samtools-1.1

When called from a SConscript it imports the following variables:
 * env
 * ciri_cpus
 * ciri_bwa_index
 * ciri_reads
 * ciri_genome_fasta
 * ciri_sample
 * ciri_bwa_extra_parameters
 * ciri_annotation
 * ciri_script

Returns: 
 [sampleid_bwa.sam.gz, sampleid_ciri.out]

'''

import os


Import('*')

try:
    # these variables can be passed with 'exports' when calling this SConscript
    # from another SConscript
    env             = env
    CPUS            = ciri_cpus
    BWA_INDEX       = ciri_bwa_index
    READS           = ciri_reads
    GENOME_FASTA    = ciri_genome_fasta
    SAMPLE          = ciri_sample
    BWA_PARAMS      = ciri_bwa_extra_parameters
    CIRI_ANNOTATION = ciri_annotation
    CIRI            = ciri_script
except NameError:
    vars = Variables('vars.py')
    vars.Add('CPUS', 'Max parallel jobs to execute', '4')
    vars.Add('BWA_INDEX', 'The BWA index', '')
    vars.Add('BWA_PARAMS', 'The BWA extra parameters', '')
    vars.Add('GENOME_FASTA', '''The  path to genome. Point to folder with one'''
                             ''' fasta file for each chromosome.''', '.')
    vars.Add('READS', 'Input reads. If paired-end, use a comma separated list', 'reads.fa')
    vars.Add('SAMPLE', 'Name of the sample', '')
    vars.Add('CIRI', 'The full path to the CIRI_vx.x.pl perl script', '')
    vars.Add('CIRI_ANNOTATION', 'The full path to the GTF/GFF annotation file', '')
    
    env = Environment(ENV=os.environ,
                      variables=vars)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

    CPUS            = env['CPUS']
    BWA_INDEX       = env['BWA_INDEX'] # Assume you have already your genome Bowtie2 index
    READS           = env['READS'].split(',')
    GENOME_FASTA    = env['GENOME_FASTA']
    SAMPLE          = env['SAMPLE']
    BWA_PARAMS      = env['BWA_PARAMS']
    CIRI            = env['CIRI']
    CIRI_ANNOTATION = env['CIRI_ANNOTATION']

bwa_cpus = CPUS

out_dir = 'ciri_out'
chdir_working_cmd  = 'cd ' + os.path.join(Dir('.').abspath, out_dir)
chdir_previous_cmd = 'cd ' + Dir('#').abspath

## Single-end reads case
read_bwa_par = ' ${SOURCES[0].abspath} '
ciri_parameters = ' -S '
## Adjust for paired-end reads
if len(READS)==2:
    read_bwa_par = read_bwa_par + ' ${SOURCES[1].abspath}'
    ciri_parameters = ''

if CIRI_ANNOTATION:
    ciri_parameters = ciri_parameters + ' -A ' + CIRI_ANNOTATION

ciri_target = os.path.join(out_dir, SAMPLE + '_ciri.out')
bwa_target = os.path.join(out_dir, SAMPLE + '_bwa.sam.gz')

## Map the reads
bwa_cmd = 'bwa mem $(-v 0 -t ' + bwa_cpus + '$) -M ' + BWA_PARAMS + ' ' + BWA_INDEX +\
          ' ' + read_bwa_par + ' > ${TARGETS[0].filebase} 2> ${SOURCES[0].filebase}_bwamem.log '
## Run CIRI on mappings
## multithread -T option works from v2 of CIRI
ciri_cmd = 'perl ' + CIRI + ' -T $(' + CPUS + '$) -I ${TARGETS[0].filebase} '\
           '-O ${TARGETS[1].file} -F ' + GENOME_FASTA + ' ' + ciri_parameters +\
           ' > ${SOURCES[0].filebase}_ciri.log 2> ${SOURCES[0].filebase}_ciri.err '
## Compress the mapping file to save disk space
compress_cmd = 'gzip ${TARGETS[0].filebase}'

## Combine the commands
bwa_ciri_cmd = bwa_cmd + ' && ' + ciri_cmd + ' && ' + compress_cmd

## Run the commands
ciri = env.Command([bwa_target, ciri_target],
                   READS, 
                   ' && '.join([chdir_working_cmd, bwa_ciri_cmd, chdir_previous_cmd]))

## Clean log files, etc.
Clean(ciri, [ciri_target + '.log', os.path.join(Dir('.').abspath, 'CIRIerror.log')])

## COUNT AND REPORT MAPPED READS
mappings_file = ciri[0]
mapped_reads_target = os.path.join(out_dir, 'CIRI_mapped_reads_count.txt')
mapped_reads_cmd    = '''zcat ${SOURCE} | samtools view -F 4 - '''\
                      '''| cut -f 1 | sort | uniq | wc -l > $TARGET'''
mapped_reads        = env.Command(mapped_reads_target, mappings_file, mapped_reads_cmd)


Return('ciri mapped_reads')

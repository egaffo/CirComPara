'''

This is a SConscript script that executes the tasks necessary to map
RNA-seq reads to a reference genome using 'Star' [1].

[1] Dobin, A., Davis, C.A., Schlesinger, F., Drenkow, J., Zaleski, C., Jha, S., Batut, P., Chaisson, M., and Gingeras, T.R. (2013). STAR: ultrafast universal RNA-seq aligner. Bioinformatics 29, 15-21.

Software dependencies:
 * 

When called from a SConscript it imports the following variables:
 * env
 * star_cpus
 * star_reads_to_map
 * star_index
 * star_extra_params
 * star_annotation

Returns:
    []
'''

import os

Import('*')

try:
    # these are the variables passed with 'exports' from a calling SConscript
    env         = star_env.Clone()
    CPUS        = star_cpus
    READS       = star_reads_to_map
    STAR_INDEX  = star_index
    STAR_PARAMS = star_extra_params
    ANNOTATION  = star_annotation

except NameError:
    vars = Variables('vars.py')
    vars.Add('CPUS', 'Max parallel jobs to execute', '4')
    vars.Add('STAR_INDEX', 'The Star index directory', '/path/to/index/dir')
    vars.Add('STAR_PARAMS', 'TopHat extra parameters', '')
    vars.Add('READS', 'Input reads. If paired-end, use a comma separated list', 'reads.fa')
    vars.Add('ANNOTATION', 'Genome annotation GTF file', 'genes.gtf')
    
    cmdline_env = Environment(ENV=os.environ,
                              variables=vars)
    
    Help(vars.GenerateHelpText(cmdline_env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

    # These are the variables given from the command line when the SConscript is called
    # standalone
    env         = cmdline_env
    CPUS        = env['CPUS']
    STAR_INDEX  = env['STAR_INDEX'] # Assume you have already your TopHat genome index
    READS       = env['READS'].split(',')
    STAR_PARAMS = env['STAR_PARAMS']
    ANNOTATION  = env['ANNOTATION']
 
## set logging id
log_id = "[STAR]"
try:
    env['LOG_PREFIX'] = env['LOG_PREFIX'] + log_id
except KeyError:
    env['LOG_PREFIX'] = log_id

env['ENV']['LOG_PREFIX'] = env['LOG_PREFIX']

star_out_dir = 'star_out'
chdir_working_cmd = '''cd ''' + os.path.join(Dir('.').abspath, star_out_dir) 
star_cmd = '''STAR --outSAMstrandField intronMotif --outSAMtype BAM SortedByCoordinate ''' +\
            STAR_PARAMS + ''' $(--runThreadN '''  + CPUS + '''$) --genomeDir ''' + STAR_INDEX

READS = [File(f) for f in READS]

if len(READS)>1:
    star_cmd = star_cmd + ''' --readFilesIn ${SOURCES[0].abspath} ${SOURCES[1].abspath} '''
else:
    star_cmd = star_cmd + ''' --readFilesIn $SOURCE.abspath '''

if READS[0].abspath.endswith('.gz'):
    star_cmd = star_cmd + ''' --readFilesCommand zcat '''
if not ANNOTATION == '':
    star_cmd = star_cmd + ''' --sjdbGTFfile ''' + ANNOTATION

chdir_parent_cmd = '''cd ''' + Dir('#').abspath

star_targets = [os.path.join(star_out_dir, f) for f in ['Aligned.sortedByCoord.out.bam', 
                                                        'Chimeric.out.junction',
                                                        'Log.out', 'Log.progress.out',
                                                        'Log.final.out', 'SJ.out.tab']]

star = env.Command(star_targets, READS, [chdir_working_cmd + ' && '+\
                                             star_cmd + ' && ' +\
                                             chdir_parent_cmd])

env.Precious(star[0]) # do not delete old alignment file untill the new one has been computed

## COUNT AND REPORT MAPPED READS
mappings_file = star[0]
mapped_reads_target = os.path.join(star_out_dir, 'STAR_mapped_reads_count.txt')
mapped_reads_cmd    = '''samtools view -F 4 ${SOURCE} '''\
                      '''| cut -f 1 | sort | uniq | wc -l > $TARGET'''
mapped_reads        = env.Command(mapped_reads_target, mappings_file, mapped_reads_cmd)


Clean('.', star_out_dir)

Return('star mapped_reads')


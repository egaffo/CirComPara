'''
This SConscript performs differential expression analysis by means of 
DESeq [1]

[1]

Software dependencies:
 * 

Variables and functions required to export when calling from a SConscript:
 * metafile
 * deseq_alignments
 * deseq_annotation
 * deseq_cpus
 * deseq_stranded

'''

import os, itertools, collections, re, csv
from collections import defaultdict

Import('*')

## AUXILIARY FUNCTIONS

def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el

def get_matching_nodes(nodelist, rexpression):
    files = []
    for node in flatten(nodelist):
        if re.match(rexpression, node.path):
            files.append(node)
    return files

def get_node_sample(node, samples):
    s = None
    for sample in samples:
        if re.match('.*'+sample+'.*', node.path):
            s = sample
            break
    return s

def get_node_condition(node, conditions):
    condition = None
    for c,samples in conditions.iteritems():
        s = get_node_sample(node, samples)
        if s:
            condition = c
            break
    return condition

## Define an action to write a DESeq friendly sample count table
def writeDESeqSampleTable(target, source, env):
    ''' Generate a DESeq friendly sample count table. 
    :param source: the project metafile, followed by the read count files computed by 
    htseq-count.
    :param target: name of the table file to be written.'''
    
    samples     = defaultdict(list)
    conditions  = defaultdict(set)
    with open(source[0].abspath, 'r') as metafile:
        reader = csv.DictReader(metafile)
        for row in reader:
            samples[row['sample']].append(os.path.abspath(row['file']))
            conditions[row['condition']].add(row['sample'])

    with open(target[0].path, 'w') as csvfile:
        headers = ['sampleName', 'fileName', 'condition']
        writer = csv.DictWriter(csvfile, fieldnames=headers)
        writer.writeheader()
        for hc in source[1:len(source)]:
            writer.writerow({'sampleName': get_node_sample(hc, samples),
                             'fileName': hc.abspath, 
                             'condition': get_node_condition(hc, conditions)})
    return None


try:
    env = env.Clone()
except NameError as ne:
    print 'ccp_DESeq.scons: cannot import', ne, '. Assume command line script call.'
    varfile = ARGUMENTS.get('VARS', 'vars.py')
    vars = Variables(varfile)
    vars.Add('CPUS', 'Set number of CPUs', '4')
    vars.Add('ANNOTATION', 'Gene annotation (a.i. an Ensembl GFF)', 'merged.gtf')
    vars.Add('META', '''Conditions to test differential expression in a comma separated '''\
             '''values (CSV) table. Required colums are 'sample','condition','file' ''', 
             'meta.csv')
    vars.Add('EXPRESSION_FILES', 'Expression table files (comma separated), '\
             'as output by hgtseq-count', '')

    env = Environment(variables = vars,
                      ENV = os.environ)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Run sample: unknown variables", unknown.keys()
        Exit(1)

    env.Replace(EXPRESSION_FILES = env['EXPRESSION_FILES'].split(','))

env.SetDefault(SCONSCRIPT_HOME = os.path.join(env['ENV']['CIRCOMPARA_HOME'], 'src'))

raw_count_matrix = None
norm_count_matrix = None
deTests = None

#htseq_counts
if len(env['EXPRESSION_FILES']) > 1:
    ## Define a Builder for the writeDESeqSampleTable action
    MakeDESeqSampleTable = Builder(action = writeDESeqSampleTable, suffix = '.csv')
    
    ### WRITE "SAMPLE TABLE" FOR DESEQ
    env.Append(BUILDERS = {'MakeDESeqSampleTable' : MakeDESeqSampleTable})
    deseq_sample_table = env.MakeDESeqSampleTable('deseq_sample_table', 
                                                  [env['META'],
                                                   env['EXPRESSION_FILES']])   
    
    ## MAKE RAW COUNT MATRIX
    raw_count_matrix_file = 'htseq_raw_counts.csv'
    raw_count_matrix_cmd = os.path.join(env['SCONSCRIPT_HOME'], 
                                        'make_count_matrix.R -i ${SOURCE} -o $TARGET')
    raw_count_matrix = env.Command(raw_count_matrix_file, 
                                   deseq_sample_table, 
                                   raw_count_matrix_cmd)
    
    ## MAKE NORMALISED COUNT MATRIX
    norm_count_matrix_file = 'DESeq2_norm_counts.csv'
    norm_count_matrix_plots_dir = 'plots'
    norm_count_matrix_cmd = os.path.join(env['SCONSCRIPT_HOME'], 
                                        '''normalize_DESeq2_counts.R -i ${SOURCES[0]} '''
                                        '''-o ${TARGETS[0]} -s ${SOURCES[1]} -d ${TARGETS[1].dir}''')
    norm_count_matrix = env.Command([norm_count_matrix_file, 
                                    os.path.join(norm_count_matrix_plots_dir, 
                                                 'pc_variation_plot.svg')], 
                                    [raw_count_matrix, deseq_sample_table],
                                    norm_count_matrix_cmd)
    
    ## RUN DESEQ
    deTests_file = 'DESeq2_diff.csv'
    deTests_report_dir = 'DESeq2_HTMLReport'
    deTests_report_file = os.path.join(deTests_report_dir, 'RNAseq_analysis_with_DESeq2.html')
    deTests_cmd = os.path.join(env['SCONSCRIPT_HOME'], 
                               '''DESeq2_diffexp.R -i ${SOURCES[0]} -o ${TARGETS[0]} '''
                               '''-s ${SOURCES[1]} -d ${TARGETS[1].dir}''')
    deTests = env.Command([deTests_file, deTests_report_file], 
                          [raw_count_matrix, deseq_sample_table], 
                          deTests_cmd)

    Clean('.', deseq_sample_table)
    Clean('.', raw_count_matrix)
    Clean('.', norm_count_matrix)
    Clean('.', deTests_file)
    Clean('.', deTests_report_dir)

results = {'GENE_EXPRESSION': norm_count_matrix[0], 
           'META': env['META'], 
           'GENE_DIFF_TESTS': deTests[0], 
           'ALL': [raw_count_matrix, norm_count_matrix, deTests]}

Return('results')

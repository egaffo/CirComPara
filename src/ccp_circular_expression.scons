import os, re

Import('*')

try:
    env = env_circular_expression.Clone()
except NameError, ne:
    vars = Variables('vars.py')
    vars.Add('', '', '')

    env = Environment(ENV=os.environ, SHELL = '/bin/bash',
                      variables=vars)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Run sample: unknown variables", unknown.keys()
        Exit(1)

runs    = env['RUNS']
samples = env['SAMPLES']
linexp  = env['LINEXP'] 

circRNA_collect_dir = 'circRNA_collection'

env_merge_sample_circrnas = env.Clone()
env_merge_sample_circrnas['SAMPLES'] = samples
env_merge_sample_circrnas['RUNS'] = runs
merge_sample_circrnas = SConscript(os.path.join(circRNA_collect_dir, 
					'ccp_merge_sample_circrnas.scons'),
                            src_dir = env['SCONSCRIPT_HOME'], 
                            variant_dir = circRNA_collect_dir, duplicate = 0,
                            exports = '''env_merge_sample_circrnas get_matching_nodes''')


env_circrna_collect = env.Clone()
env_circrna_collect['CSVS'] = merge_sample_circrnas
env_circrna_collect['GTF'] = env['ANNOTATION'] #cuffmerge
circrna_collect = SConscript(os.path.join(circRNA_collect_dir, 
                                          'ccp_collect_circrnas.scons'), 
                            src_dir = env['SCONSCRIPT_HOME'], 
                            variant_dir = circRNA_collect_dir, duplicate = 0,
                            exports = '''env_circrna_collect''')

## COMPUTE BACKSPLICES' LINEAR COUNTS FOR CLR (CIRCULAR TO LINEAR RATIO)
btmcovstrand = '' ## check if stranded read alignment
strandness_pattern = re.compile("--rna-strandness\s+[FR]{1,2}")
if strandness_pattern.search(env['HISAT2_EXTRA_PARAMS']):
    btmcovstrand = '-s'

## TODO: improve the counting by considering only linear spliced reads
## and linear reads spanning the splice site, while not counting reads
## exactly matching splice site bound (for which we cannot decide 
## whether they belong to the circular or the linear transcript)
#for s in sorted(runs_dict.keys()):
#    ## keep only spliced reads
#    target_1 = "lin_spliced_reads_in_bks.tab"
#    sources_1 = [runs_dict[s]['LINEAR_ALIGNMENTS'], 
#                 circexp['SNP_UNIQUE_CIRC']]
#    cmd_1 = '''samtools view ${SOURCES[0]} | grep "N" | bedtools '''\
#            '''coverage -counts -sorted ''' + btmcovstrand + \
#            ''' -a ${SOURCES[1]} -b stdin > $TARGET '''
#    lin_spliced_reads_in_bks = env.Command(target_1, sources_1, cmd_1)

#    ## keep only linear reads spanning backsplice
#    ## Hint: use bedtools slop to consider bases outside the 
#    ## backsplice start/end sites
#    target_2 = "lin_reads_spanning_bks.tab"
#    sources_2 = sources_1.append(genome_file)
#    cmd_2 = '''samtools view ${SOURCES[0]} | grep -v "N" | '''\
#            '''bedtools coverage -counts -sorted ''' + btmcovstrand + \
#            ''' -a <( bedtools slop -b 1 -i ${SOURCES[1]} ) '''\
#            '''-b stdin > $TARGET '''
#    lin_reads_spanning_bks = env.Command(target_2, sources_2, cmd_2)

btmcov_sources = [circrna_collect[2], 
                  [env['RUNS_DICT'][s]['LINEAR_ALIGNMENTS'] for 
                             s in sorted(env['RUNS_DICT'].keys())]]
btmcov_target = 'bks_linear_counts.tab.gz'
btmcov_cmd = '''bedtools multicov ''' + btmcovstrand + \
             ''' -bed ${SOURCES[0]} -bams ${SOURCES[1:]} | gzip -c > ${TARGET}'''
btmcov = env.Command(btmcov_target, 
                     btmcov_sources, 
                     btmcov_cmd)

## ANALYZE AND REPORT CIRCRNAS 
circrna_analyze_dir = 'circrna_analyze'
env_circrna_analyze = env.Clone()
env_circrna_analyze['META'] = File(env['META']).abspath
env_circrna_analyze['CIRCRNAS'] = circrna_collect[1]
env_circrna_analyze['CIRCGENES'] = circrna_collect[0]
env_circrna_analyze['GENEEXP'] = linexp['GENE_EXP_ANALYSIS'][1] #gene_exp_analysis[1] #gene_exp
env_circrna_analyze['GENEMETA'] = env_circrna_analyze['META'] #File(gene_meta).abspath
env_circrna_analyze['BKS_LIN_COUNTS'] = btmcov
if int(env_circrna_analyze['MIN_METHODS']) > len(env['CIRCRNA_METHODS']):
    env_circrna_analyze['MIN_METHODS'] = len(env['CIRCRNA_METHODS'])

circrna_analyze = SConscript(os.path.join(circrna_analyze_dir, 
                                          'ccp_analyze_circrnas.scons'),
                            src_dir = env['SCONSCRIPT_HOME'],
                            variant_dir = circrna_analyze_dir, duplicate = 0,
                            exports = '''env_circrna_analyze''')
Depends(circrna_analyze, linexp['GENE_EXP_ANALYSIS'][1])#gene_exp)

Clean('.', circRNA_collect_dir)
Clean('.', circrna_analyze_dir)


results = {'SNP_UNIQUE_CIRC': circrna_collect[2]}

Return('results')

'''
This SConscript performs RNA-seq analysis for each sample specified in the metadata file.
In addition, it merges transcript annotation derived from each samples and assess differential
gene and transcript expression among the samples.
The metadata file given as input must be comma separated and must have the following columns:

file        :the path to the reads file. If paired-end use one row per read file, setting the same 
             sample name
sample      :the sample name/ID  
condition   :biological condition, used for differential gene expression. 
adapter     :read adapter to trim (optional. leave empty string if not applicable)

meta.csv example:

file,sample,condition,adapter
/home/user/data/reads/SRR445566.fastq.gz,SRR445566,TUMOR,
/home/user/data/reads/SRR534325_1.fastq.gz,SRR534325,CONTROL,/trimmomatic/adapters/TruSeq3-PE-2.fa
/home/user/data/reads/SRR534325_2.fastq.gz,SRR534325,CONTROL,/trimmomatic/adapters/TruSeq3-PE-2.fa

'''

import os, csv, itertools, collections, re
from collections import defaultdict

## GET PROGRAM ARGUMENTS
vars = Variables('vars.py')
vars.Add('META', 'The metadata table file where you specify the project samples, etc.', 'meta.csv')
vars.Add('CPUS', 'Set number of CPUs', '4')
vars.Add('MAPPER', 'The aligner to map reads to the genome', 'segemehl') 
vars.Add('PREPROCESSOR', 'The preprocessing method', 'trimmomatic')
vars.Add('ANNOTATION', 'Gene annotation (Ensembl GFF)', '')
vars.Add('GENOME_FASTA', 'The FASTA file with the reference genome', 'genome.fa')
vars.Add('GENOME_INDEX', '''The index of the reference genome. Depends on the mapper used; '''
                         '''e.g. genome.idx if using segemehl''', 'genome.idx')

env = Environment(ENV=os.environ,
                  variables=vars)
Help(vars.GenerateHelpText(env))
unknown = vars.UnknownVariables()
if unknown:
    print "Run sample: unknown variables", unknown.keys()
    Exit(1)

META         = env['META']
CPUS         = env['CPUS']
GENOME_INDEX = env['GENOME_INDEX']
GENOME_FASTA = env['GENOME_FASTA']
PREPROCESSOR = env['PREPROCESSOR']
MAPPER       = env['MAPPER']
ANNOTATION   = env['ANNOTATION']

SCONSCRIPT_HOME = os.path.join(env['ENV']['CIRCOMPARA_HOME'], 'src')

## set logging id
log_id = "[JUNK2 MULTI]"
try:
    env['LOG_PREFIX'] = env['LOG_PREFIX'] + log_id
except KeyError:
    env['LOG_PREFIX'] = log_id

env['ENV']['LOG_PREFIX'] = env['LOG_PREFIX']

## set logging id
log_id = "[JUNK2 MULTI]"
try:
    env['LOG_PREFIX'] = env['LOG_PREFIX'] + log_id
except KeyError:
    env['LOG_PREFIX'] = log_id

env['ENV']['LOG_PREFIX'] = env['LOG_PREFIX']

samples_dir = 'samples'

## GRUB METADATA
samples     = defaultdict(list)
adapters    = defaultdict(str)
conditions  = defaultdict(set)
with open(META) as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        samples[row['sample']].append(os.path.abspath(row['file']))
        adapters[row['sample']] = row['adapter'] ##NB:last sample adapter row overwrites the previous
        conditions[row['condition']].add(row['sample'])

## PROCESS SAMPLES
runs = []
for sample in sorted(samples.keys()):
    sample_cpus         = CPUS
    sample_genome_index = GENOME_INDEX
    sample_genome_fasta = GENOME_FASTA
    sample_preprocessor = PREPROCESSOR
    sample_adapter_file = adapters[sample]
    sample_mapper       = MAPPER
    sample_annotation   = ANNOTATION
    sample_raw_reads    = samples[sample]

    sample_dir = os.path.join(samples_dir, sample)
    run_sample = SConscript(os.path.join(sample_dir, 'junk2_run_sample'), 
                            src_dir = SCONSCRIPT_HOME, 
                            variant_dir = sample_dir, duplicate = 0,
                            exports = 'env sample_cpus sample_genome_index sample_genome_fasta sample_preprocessor sample_adapter_file sample_mapper sample_annotation sample_raw_reads')
    runs.append(run_sample)

## MERGE SAMPLE TRANSCRIPTOMES
def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el

def get_matching_nodes(nodelist, rexpression):
    files = []
    for node in flatten(nodelist):
        if re.match(rexpression, node.path):
            files.append(node)
    return files

transcripts_gtf_files = get_matching_nodes(runs, '.*transcripts\.gtf')
cuffmerge_cpus = CPUS
cuffmerge_annotation = ANNOTATION
cuffmerge_genome_fasta = GENOME_FASTA
cuffmerge_dir = 'cuffmerge'
cuffmerge = SConscript(os.path.join(cuffmerge_dir, 'junk2_cuffmerge'),
                       src_dir = SCONSCRIPT_HOME,
                       variant_dir = cuffmerge_dir, duplicate = 0,
                       exports = 'env transcripts_gtf_files cuffmerge_cpus cuffmerge_annotation cuffmerge_genome_fasta')

## RETRIEVE TRANSCRIPT SEQUENCES
transcript_sequences_annotation = cuffmerge
transcript_sequences_genome = GENOME_FASTA
transcript_sequences_dir = 'transcript_sequences'
transcript_sequences = SConscript(os.path.join(transcript_sequences_dir, 'junk2_transcript_fastas'), 
                                  src_dir = SCONSCRIPT_HOME,
                                  variant_dir = transcript_sequences_dir, duplicate = 0,
                                  exports = 'env transcript_sequences_annotation transcript_sequences_genome')

## QUANTIFY EXPRESSION WITH MERGED ANNOTATION
cuffquant_annotation = cuffmerge
alignments = get_matching_nodes(runs, '.*mappings.*\.bam')

cuffquant_dir = 'cuffquant'
cuffquant = SConscript(os.path.join(cuffquant_dir, 'junk2_cuffquant'),
                       src_dir = SCONSCRIPT_HOME,
                       variant_dir = cuffquant_dir, duplicate = 0,
                       exports = 'env alignments cuffquant_annotation')

Depends(cuffquant, [cuffmerge, alignments])

## COMPUTE NORMALIZED EXPRESSION: CUFFNORM
# TODO

## COMPUTE DIFFERENTIAL EXPRESSION: CUFFDIFF
cuffdiff_cpus = CPUS
cuffdiff_conditions = conditions
cuffdiff_annotation = cuffmerge
cuffdiff_quantities = get_matching_nodes(cuffquant, '.*\.cxb')
cuffdiff_dir = 'cuffdiff'
cuffdiff = SConscript(os.path.join(cuffdiff_dir, 'junk2_cuffdiff'),
                      src_dir = SCONSCRIPT_HOME,
                      variant_dir = cuffdiff_dir, duplicate = 0,
                      exports = 'env cuffdiff_cpus cuffdiff_conditions cuffdiff_annotation cuffdiff_quantities')

Depends(cuffdiff, cuffquant)

## COMPUTE DIFFERENTIAL EXPRESSION: DESEQ
deseq_annotation = cuffmerge
deseq_alignments = get_matching_nodes(runs, '.*mappings.*\.bam')
metafile = File(META).abspath
deseq_cpus = CPUS
deseq_dir = 'deseq'
deseq = SConscript(os.path.join(deseq_dir, 'junk2_DESeq'),
                   src_dir = SCONSCRIPT_HOME,
                   variant_dir = deseq_dir, duplicate = 0,
                   exports = 'env deseq_annotation deseq_alignments metafile deseq_cpus')
Depends(deseq, [cuffmerge, alignments])

## CLEAN DIRS WHEN CLEANING TARGETS
Clean('.', samples_dir)
Clean('.', cuffmerge_dir)
Clean('.', transcript_sequences_dir)
Clean('.', cuffquant_dir)
Clean('.', cuffdiff_dir)
Clean('.', deseq_dir)


#!/usr/bin/env python

'''
Collapse genomic coordinates of a GTF file according to a feature.
F.i: given a GTF generated by Cufflinks/Cuffmerge, by default
it returns the gene_id (the 'XLOC') coordinates in BED6 format.
'''

import argparse, re, gzip

class Gene:
    
    def __init__(self, gene_id, gene_name, chrm, start, end, strand):

        self.gene_id   = gene_id
        self.gene_name = gene_name
        self.chrm      = chrm
        self.start     = int(start)
        self.end       = int(end)
        self.strand    = strand
    
    def update_start(self, coord):
        coord = int(coord)
        if coord < self.start:
            self.start = coord
    
    def update_end(self, coord):
        coord = int(coord)
        if coord > self.end:
            self.end = coord

    def __str__(self):
        return '\t'.join([self.gene_id, self.gene_name, self.chrm, 
                          str(self.start), str(self.end), self.strand])

    def as_bed(self):
        return '\t'.join([self.chrm, str(self.start - 1), str(self.end), 
                          self.gene_id, '0', self.strand])
 


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description = '')
    parser.add_argument('infile', default = '-')
    parser.add_argument('--feature', '-f', default = 'gene_id', 
                        help = 'The feature to collapse for. E.g. gene_id (default) or transcript_id')

    args = parser.parse_args()

    genes = {}
    with open(args.infile, 'r') as f:
        
        for line in f:

            fields = line.rstrip().split('\t')
            gene_id = re.search(args.feature + ' "([^"]*)"', fields[8]).group(1)
            gene_name = ''
            gene_name_match = re.search('gene_name "([^"]*)"', fields[8])
            if gene_name_match:
                gene_name = gene_name_match.group(1)
            start   = fields[3]
            end     = fields[4]
            chrm    = fields[0]
            strand  = fields[6]
            try:
                genes[gene_id].update_start(start)
                genes[gene_id].update_end(end)
            except KeyError:
                genes[gene_id] = Gene(gene_id, gene_name, chrm, start, end, strand)
    
    print '\n'.join([genes[gene].as_bed() for gene in genes.keys()])




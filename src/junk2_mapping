'''
This script functions as a dispatcher to use the desired mapper.
It sets the necessary variables and launch the mapper.

Variables to set when calling from a SConscript:
 * mapper
 * genome_index
 * genome_fasta
 * sample_id
 * mapper_extra_params
 * mapper_cpus
 * clean_reads

'''
import os

Import('*')

try:
    env = env.Clone()
    mapper
    genome_index
    genome_fasta
    sample_id
    mapper_extra_params
    mapper_cpus
    reads_to_map = clean_reads
except NameError:
    varfile = ARGUMENTS.get('VARS', 'vars.py')
    vars = Variables(varfile)
    vars.Add('CPUS', 'Set number of CPUs', '4')
    vars.Add('MAPPER', 'The aligner to map reads to the genome', 'segemehl') 
    vars.Add('MAPPER_PARAM', 'Additional parameters for the mapper', '')
    vars.Add('GENOME_FASTA', 'The FASTA file with the reference genome', 'genome.fa')
    vars.Add('GENOME_INDEX', '''The index of the reference genome. Depends on the mapper used; '''
                             '''e.g. genome.idx if using segemehl''', 'genome.idx')
    vars.Add('READS', 'RNA-seq reads. Comma separated list if paired-end', 'reads.fa')
    vars.Add('SAMPLE', 'The sample name', 'sample')
    
    env = Environment(variables = vars,
                      ENV = os.environ)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

    mapper = env['MAPPER']
    genome_index = env['GENOME_INDEX']
    genome_fasta = env['GENOME_FASTA']
    sample_id = env['SAMPLE']
    mapper_extra_params = env['MAPPER_PARAM']
    mapper_cpus = env['CPUS']
    reads_to_map = [File(f).abspath for f in env['READS'].split(',')]

SRC_DIR = os.path.join(env['ENV']['JUNK2_HOME'], 'src')

## set logging id
log_id = "[READ MAPPING]"
try:
    env['LOG_PREFIX'] = env['LOG_PREFIX'] + log_id
except KeyError:
    env['LOG_PREFIX'] = log_id

env['ENV']['LOG_PREFIX'] = env['LOG_PREFIX']

mapping_dir = 'mappings'
#make_mapping_dir = env.Command(Dir(mapping_dir), [], Mkdir('$TARGET'))
mappings = []
if mapper.lower()=='segemehl':
    segemehl_cpus = mapper_cpus
    sample_id = sample_id
    segemehl_genome_fasta = genome_fasta
    segemehl_index = genome_index
    segemehl_extra_params = mapper_extra_params

    mappings.append(SConscript(os.path.join(mapping_dir, 'junk2_segemehl_mapping'), 
                    src_dir = SRC_DIR, variant_dir = mapping_dir, 
                    duplicate = 0, 
                    exports = 'env reads_to_map segemehl_cpus sample_id segemehl_genome_fasta segemehl_index segemehl_extra_params')
                   )

Clean('.', mapping_dir)
Return('mappings')


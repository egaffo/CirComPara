'''

This is a SConscript script that executes the tasks necessary to map
RNA-seq reads to a reference genome using 'TopHat2' [1].

[1] 1.Kim, D. et al. 
    TopHat2: accurate alignment of transcriptomes in the presence 
    of insertions, deletions and gene fusions. 
    Genome Biology 14, R36 (2013).

Software dependencies:
 * Samtools-1.1

When called from a SConscript it imports the following variables:
 * env
 * tophat_cpus
 * reads_to_map
 * tophat_index
 * tophat_extra_params

Returns:
    ['accepted_hits.bam', 
     'junctions.bed',
     'insertions.bed',
     'deletions.bed',
     'unmapped.bam']
'''

import os

Import('*')

try:
    # these are the variables passed with 'exports' from a calling SConscript
    env = env.Clone()
    CPUS = tophat_cpus
    READS = reads_to_map
    TOPHAT_INDEX = tophat_index
    TOPHAT_PARAMS = tophat_extra_params 

except NameError:
    vars = Variables('vars.py')
    vars.Add('CPUS', 'Max parallel jobs to execute', '4')
    vars.Add('TOPHAT_INDEX', 'The TopHat index', '')
    vars.Add('TOPHAT_PARAMS', 'TopHat extra parameters', '')
    vars.Add('READS', 'Input reads. If paired-end, use a comma separated list', 'reads.fa')
    
    cmdline_env = Environment(ENV=os.environ,
                              variables=vars)
    
    Help(vars.GenerateHelpText(cmdline_env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

    # These are the variables given from the command line when the SConscript is called
    # standalone
    env = cmdline_env
    CPUS = env['CPUS']
    TOPHAT_INDEX = env['TOPHAT_INDEX'] # Assume you have already your TopHat genome index
    READS = env['READS'].split(',')
    TOPHAT_PARAMS = env['TOPHAT_PARAMS']
 
## set logging id
log_id = "[TOPHAT]"
try:
    env['LOG_PREFIX'] = env['LOG_PREFIX'] + log_id
except KeyError:
    env['LOG_PREFIX'] = log_id

env['ENV']['LOG_PREFIX'] = env['LOG_PREFIX']

tophat_out_dir = 'tophat_out'
chdir_working_cmd = '''cd ''' + os.path.join(Dir('.').abspath, tophat_out_dir) 
tophat_cmd = '''tophat -o . ''' + TOPHAT_PARAMS +\
             ''' $(-p '''  + CPUS + '''$) ''' + TOPHAT_INDEX

READS = [File(f) for f in READS]

if len(READS)>1:
    tophat_cmd = tophat_cmd + ''' ${SOURCES[0].abspath} ${SOURCES[1].abspath} '''
else:
    tophat_cmd = tophat_cmd + ''' $SOURCE.abspath '''

chdir_parent_cmd = '''cd ''' + Dir('#').abspath

tophat_targets = [os.path.join(tophat_out_dir, f) for f in ['accepted_hits.bam', 
                                                            'junctions.bed',
                                                            'insertions.bed',
                                                            'deletions.bed',
                                                            'unmapped.bam']]

tophat = env.Command(tophat_targets, READS, [chdir_working_cmd + ' && '+\
                                             tophat_cmd + ' && ' +\
                                             chdir_parent_cmd])

env.Precious(tophat[0]) # do not delete old alignment file untill the new one has been computed

Clean('.', tophat_out_dir)

Return('tophat')


'''
This SConscript characterize the transcriptome from one RNA-seq sample.
It composes a pipeline that gives statistics on the raw data and
also processes the raw reads to map them on a reference genome, 
reconstruct transcripts, estimates gene/transcript expression, and 
also detects circRNAs by means of backsplice junctions.

Software dependencies are inherited from the JUNK2-SConscripts used:
 * junk2_read_statistics
 * junk2_preprocess
 * junk2_hisat2
 * junk2_expression
 * junk2_sample_circrna_methods
 * junk2_bamtofastq


When called from a SConscript it imports the following variables:
 * env
 * sample_cpus
 * sample_genome_index
 * sample_genome_fasta
 * sample_preprocessor
 * sample_preprocessor_params
 * sample_adapter_file
 * sample_annotation
 * sample_raw_reads
 * segemehl_index
 * bwa_index
 * bwa_params
 * ciri
 * bowtie2_index
 * star_index
 * gene_pred
 * hisat2_extra_params
 * cufflinks_params
 * ciri_extra_parameters

'''

import os, itertools, re

## SET (DISPATCHER) SCRIPT NAMES. THESE ARE THE MAIN PIPELINE STEPS, EACH OF THEM MIGHT FIRE
## DIFFERENT ACTIONS/SCONSCRIPTS
junk2_read_statistics = 'junk2_read_statistics'
junk2_preprocess      = 'junk2_preprocess'
junk2_mapping         = 'junk2_hisat2'
junk2_expression      = 'junk2_expression'
junk2_circrnas        = 'junk2_sample_circrna_methods'
junk2_bamtofastq      = 'junk2_bamtofastq'

Import('*')

try:
    env = env.Clone()
    CPUS         = sample_cpus
    GENOME_INDEX = sample_genome_index
    GENOME_FASTA = sample_genome_fasta
    PREPROCESSOR = sample_preprocessor
    PREPROCESSOR_PARAMS = sample_preprocessor_params
    ADAPTER_FILE = sample_adapter_file
    ANNOTATION   = sample_annotation
    READS        = sample_raw_reads

    SEGEMEHL_INDEX = segemehl_index
    BWA_INDEX      = bwa_index
    BWA_PARAMS     = bwa_params
    CIRI           = ciri
    CIRI_EXTRA_PARAMS = ciri_extra_parameters
    BOWTIE2_INDEX  = bowtie2_index

    STAR_INDEX = star_index
    GENEPRED   = gene_pred
    HISAT2_EXTRA_PARAMS = hisat2_extra_params
    CUFFLINKS_PARAMS    = cufflinks_params

except NameError:
    varfile = ARGUMENTS.get('VARS', 'vars.py')
    vars = Variables(varfile)
    vars.Add('CPUS', 'Set number of CPUs', '4')
    vars.Add('PREPROCESSOR', 'The preprocessing method', 'trimmomatic')
    vars.Add('PREPROCESSOR_PARAMS', 
             '''Read preprocessor extra parameters. F.i. if Trimmomatic, an empty string '''\
             '''defaults to '''\
             '''MAXINFO:40:0.5 LEADING:20 TRAILING:20 SLIDINGWINDOW:4:30 MINLEN:50 AVGQUAL:30 ''', 
             '')
    vars.Add('ADAPTER_FILE', 'FASTA file full path of the adapter sequence', '')
    vars.Add('ANNOTATION', 'Gene annotation (Ensembl GFF)', '')
    vars.Add('GENOME_FASTA', 'The FASTA file with the reference genome', 'genome.fa')
    vars.Add('GENOME_INDEX', '''The index of the reference genome for HISAT2''', '/path/to/index')
    vars.Add('READS', 'RNA-seq reads. Comma separated list if paired-end', 'reads.fa')

    vars.Add('SEGEMEHL_INDEX', '''The .idx index for segemehl''', 'genome.idx')
    vars.Add('BWA_INDEX', '''The index of the reference genome for BWA''','/path/to/index')
    vars.Add('BWA_PARAMS','Extra parameters for BWA','')
    vars.Add('CIRI', 'The full path to the CIRI_vx.x.pl perl script', '')
    vars.Add('BOWTIE2_INDEX', '''The index of the reference genome for BOWTIE2''','/path/to/index')

    vars.Add('STAR_INDEX', 'The directory path where to find Star genome index', 
             '/path/to/Star/index/dir')
    vars.Add('GENEPRED', 'The genome annotation in GenePred format', 'genes.genePred')
    vars.Add('HISAT2_EXTRA_PARAMS', '''Extra parameters to add to the HISAT2 aligner fixed '''\
             '''parameters '--dta --dta-cufflinks --rg-id <SAMPLE> --no-discordant '''\
             '''--no-mixed --no-overlap'. For instance, '--rna-strandness FR' if stranded reads'''\
             ''' are used.''', '')
    vars.Add('CUFFLINKS_PARAMS', '''Cufflinks extra parameters. '''\
             '''F.i. '--library-type fr-firststrand' if dUTPs stranded library were used '''\
             '''for the sequencing''', '')
    vars.Add('CIRI_EXTRA_PARAMS', 'CIRI additional parameters', '')
   
    env = Environment(variables = vars,
                      ENV = os.environ)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Run sample: unknown variables", unknown.keys()
        Exit(1)

    CPUS = env['CPUS']
    GENOME_INDEX = env['GENOME_INDEX']
    GENOME_FASTA = env['GENOME_FASTA']
    PREPROCESSOR = env['PREPROCESSOR']
    PREPROCESSOR_PARAMS = env['PREPROCESSOR_PARAMS']
    ADAPTER_FILE = env['ADAPTER_FILE']
    ANNOTATION = env['ANNOTATION']
    READS = env['READS'].split(',')

    SEGEMEHL_INDEX = env['SEGEMEHL_INDEX']
    BWA_INDEX      = env['BWA_INDEX']
    BWA_PARAMS     = env['BWA_PARAMS']
    CIRI           = env['CIRI']
    CIRI_EXTRA_PARAMS = env['CIRI_EXTRA_PARAMS']
    BOWTIE2_INDEX = env['BOWTIE2_INDEX']

    STAR_INDEX = env['STAR_INDEX']
    GENEPRED   = env['GENEPRED']

    HISAT2_EXTRA_PARAMS = env['HISAT2_EXTRA_PARAMS']
    CUFFLINKS_PARAMS    = env['CUFFLINKS_PARAMS']

SRC_DIR = os.path.join(env['ENV']['JUNK2_HOME'], 'src')

#env['SAMPLE'] = os.path.basename(Dir('.').path)
sample_name = os.path.basename(Dir('.').path)
if sample_name=='.':
    sample_name = os.path.basename(Dir('.').abspath)

log_id = "[CIRCPIPE " + sample_name + "]"
try:
    env['LOG_PREFIX'] = env['LOG_PREFIX'] + log_id
except KeyError:
    env['LOG_PREFIX'] = log_id


results = []

## GET INPUT READ FILE FULL PATH
raw_reads = [File(f).abspath for f in READS]

## COMPUTE STATISTICS ON RAW READS
read_statistics_dir = 'read_statistics'
raw_read_stats = []
for readset in raw_reads:
    read_statistics_readset = readset
    stat = SConscript(os.path.join(read_statistics_dir, junk2_read_statistics), 
                      src_dir=SRC_DIR, variant_dir=read_statistics_dir, duplicate=0,
                      exports='env read_statistics_readset')
    raw_read_stats.append(stat)

results.append(raw_read_stats)

build_dir = 'processings'
## EXECUTE SCRIPTS: 
## READ PREPROCESSING
preprocess_raw_reads    = raw_reads
preprocess_adapter_file = ADAPTER_FILE
preprocess_preprocessor = PREPROCESSOR 
preprocess_cpus         = CPUS
preprocess_params = PREPROCESSOR_PARAMS
preprocess  = env.SConscript(os.path.join(build_dir, junk2_preprocess), 
                             variant_dir = build_dir, src_dir = SRC_DIR, 
                             duplicate = 0, exports='env preprocess_raw_reads '''
                             '''preprocess_adapter_file preprocess_preprocessor '''
                             '''preprocess_cpus preprocess_params''')
results.append(preprocess)
## set the clean read file paths, relative to the calling SConstruct (not the calling SConscript).
## Implementation note: here you should know what the preprocess SConscript returns to handle it 
## properly. For instance: Trimmomatic with paired-end reads gives four output read files and 
## you probably want to use the 0 and 2 indexed files of the returned list (i.e. the processed 
## reads with mate read). Instead, if no preprocessing was performed, the clean reads are the raw
## reads and the list is only two elements (for paired-end reads)

## get first in pair or the single end preprocessed read file
clean_reads = [preprocess[0][0]]
## paired end case: add the second in pair clean read file
if len(preprocess[0]) > 2:
    ## case: Trimmomatic paired-end
    if env['PREPROCESSOR']=='trimmomatic':
        clean_reads.append(preprocess[0][2])
    ## case: no preprocessing was performed
    else:
        clean_reads.append(preprocess[0][1])

## ALIGN TO GENOME
#mapper = MAPPER
hisat2_index = GENOME_INDEX
#genome_fasta = GENOME_FASTA
sample_id = sample_name
hisat2_extra_params = HISAT2_EXTRA_PARAMS + ' --dta --dta-cufflinks --rg-id ' + sample_name +\
                      ' --no-discordant --no-mixed --no-overlap '
hisat2_cpus = CPUS
reads_to_map = clean_reads
mappings    = env.SConscript(os.path.join(build_dir, junk2_mapping), 
                             variant_dir = build_dir, src_dir = SRC_DIR, 
                             duplicate = 0, exports = '''env reads_to_map '''
                             '''hisat2_index sample_id hisat2_extra_params '''
                             '''hisat2_cpus''')
results.append(mappings)

## EXPRESSION ANALYSIS
expression_cpus = CPUS
expression_genome_fasta = GENOME_FASTA 
expression_annotation = ANNOTATION
expression_cufflinks_params = CUFFLINKS_PARAMS
mapping_file = mappings[0]
expression  = env.SConscript(os.path.join(build_dir, junk2_expression), 
                             variant_dir = build_dir, src_dir = SRC_DIR, 
                             duplicate = 0, exports = '''env mapping_file '''
                             '''sample_name expression_cpus expression_genome_fasta '''
                             '''expression_annotation expression_cufflinks_params''')
results.append(expression)

## CIRCRNA DETECTION
# get unmapped reads. Distinguish between unmapped pairs 
# (SAM flag 4+8=12 unmapped and mate unmapped) and 
# unmapped single (SAM flag -f 4 -F 8)
unmapped_dir = os.path.join(build_dir, 'unmapped_reads')

keep_unmapped_cmd = '''samtools view -hb -f 12 $SOURCE > $TARGET'''
unmapped_bam_target = os.path.join(unmapped_dir, sample_name + '_unmapped.bam')
unmapped_bam    = env.Command(unmapped_bam_target, mapping_file.abspath, keep_unmapped_cmd)

results.append(unmapped_bam)

keep_unmapped_single_cmd = '''samtools view -hb -f 4 -F 8 $SOURCE > $TARGET '''
unmapped_single_bam_target = os.path.join(unmapped_dir, sample_name + '_unmapped_single.bam')
unmapped_single_bam    = env.Command(unmapped_single_bam_target, 
                              mapping_file.abspath, keep_unmapped_single_cmd)

results.append(unmapped_single_bam)

# tranform unmapped read BAM into FASTQ file(s) (paired)
bam2fq_cpus = CPUS
bam2fq_bamfile  = unmapped_bam
bam2fq_prefix_id    = sample_name + '_unmapped'
bam2fq_paired   = str(len(READS)>1)

unmapped_fq  = env.SConscript(os.path.join(unmapped_dir, junk2_bamtofastq), 
                             variant_dir = unmapped_dir, src_dir = SRC_DIR, 
                             duplicate = 0, exports = '''env bam2fq_cpus '''
                             '''bam2fq_bamfile bam2fq_prefix_id bam2fq_paired''')
results.append(unmapped_fq)

# tranform unmapped read BAM into FASTQ file(s) (unpaired)
bam2fq_bamfile  = unmapped_single_bam
bam2fq_prefix_id    = sample_name + '_unmapped_single'
bam2fq_paired   = 'False'

unmapped_single_fq  = env.SConscript(os.path.join(unmapped_dir, junk2_bamtofastq), 
                             variant_dir = unmapped_dir, src_dir = SRC_DIR, 
                             duplicate = 0, exports = '''env bam2fq_cpus '''
                             '''bam2fq_bamfile bam2fq_prefix_id bam2fq_paired''')
results.append(unmapped_single_fq)

# run circRNA detection pipeline 
sample_cpus         = CPUS
sample_genome_fasta = GENOME_FASTA
sample_annotation   = ANNOTATION
if(len(READS)>1):
    sample_raw_reads    = [f.abspath for f in unmapped_fq]
else:
    sample_raw_reads    = [f.abspath for f in unmapped_single_fq]

sample_segemehl_index     = SEGEMEHL_INDEX
ciri_bwa_index            = BWA_INDEX
ciri_bwa_extra_parameters = BWA_PARAMS
ciri_script               = CIRI

bowtie2_index = BOWTIE2_INDEX

star_index  = STAR_INDEX
gene_pred   = GENEPRED

## set strandness parameter for circRNA detection methods
## check by HISAT parameters
strandness_pattern = re.compile("--rna-strandness\s+[FR]{1,2}")
if strandness_pattern.search(hisat2_extra_params):
    ## Environment is propagated to the Sconscript
    env['FINDCIRC_EXTRA_PARAMS'] = ' --strandpref --stranded '
circrnas = env.SConscript(os.path.join(build_dir, junk2_circrnas), 
                        src_dir = SRC_DIR, 
                        variant_dir = build_dir, duplicate = 0,
                        exports = '''env sample_cpus sample_genome_fasta '''
                        '''sample_annotation sample_raw_reads sample_segemehl_index '''
                        '''ciri_bwa_index ciri_bwa_extra_parameters '''
                        '''ciri_script bowtie2_index star_index gene_pred '''
                        '''ciri_extra_parameters''')
results.append(circrnas)

## CLEAN COMMANDS
Clean('.', read_statistics_dir)
Clean('.', build_dir)
Clean('.', unmapped_dir)

Return('results')

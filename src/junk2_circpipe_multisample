'''
This SConscript performs RNA-seq analysis for each sample specified in the metadata file.
In addition, it merges transcript annotation derived from each samples and assess differential
gene and transcript expression among the samples.
The metadata file given as input must be comma separated and must have the following columns:

file        :the path to the reads file. If paired-end use one row per read file,
             setting the same sample name
sample      :the sample name/ID
condition   :biological condition, used for differential gene expression.
adapter     :read adapter to trim (optional. leave empty string if not applicable)
translocation:sharp (#) separted list of the coordinates involving fusion genes/translocations,
             defined as coords1&coords2 elements (optional)

meta.csv example:

file,sample,condition,adapter,translocation
/home/user/data/reads/SRR445566.fastq.gz,SRR445566,TUMOR,
/home/user/data/reads/SRR534325_1.fastq.gz,SRR534325,CONTROL,/trimmomatic/adapters/TruSeq3-PE-2.fa
/home/user/data/reads/SRR534325_2.fastq.gz,SRR534325,CONTROL,/trimmomatic/adapters/TruSeq3-PE-2.fa
/home/user/data/reads/SRR534326_1.fastq.gz,SRR534325,t(4;1)t(1;X),,4:90000-120000:+&11:20-30000:-#1:20-400:+&X:1000-2045:+
/home/user/data/reads/SRR534326_2.fastq.gz,SRR534325,CONTROL,t(4;1)t(1;X),4:90000-120000:+&11:20-30000:-#1:20-400:+&X:1000-2045:+

'''

import os, csv, itertools, collections, re, errno
from collections import defaultdict

def SymLink(target, source, env):
    try:
        os.symlink(os.path.abspath(str(source[0])), os.path.abspath(str(target[0])))
    except OSError, e:
        if e.errno == errno.EEXIST:
            os.rmdir(os.path.abspath(str(target[0])))
            os.symlink(os.path.abspath(str(source[0])), os.path.abspath(str(target[0])))

## GET PROGRAM ARGUMENTS
vars = Variables('vars.py')
vars.Add('META', 'The metadata table file where you specify the project samples, etc.', 'meta.csv')
vars.Add('CPUS', 'Set number of CPUs', '4')
vars.Add('PREPROCESSOR', 'The preprocessing method', 'trimmomatic')
vars.Add('PREPROCESSOR_PARAMS',
        '''Read preprocessor extra parameters. F.i. if Trimmomatic, an empty string '''\
        '''defaults to '''\
        '''MAXINFO:40:0.5 LEADING:20 TRAILING:20 SLIDINGWINDOW:4:30 MINLEN:50 AVGQUAL:30 ''',
        '')
vars.Add('ANNOTATION', 'Gene annotation (Ensembl GFF)', '')
vars.Add('GENOME_FASTA', 'The FASTA file with the reference genome', '')
vars.Add('CIRI', 'The full path to the CIRI_vx.x.pl perl script', '')
vars.Add('BWA_PARAMS','Extra parameters for BWA','')

vars.Add('GENOME_INDEX', '''The index of the reference genome for HISAT2''', '')
vars.Add('SEGEMEHL_INDEX', '''The .idx index for segemehl''', '')
vars.Add('BWA_INDEX', '''The index of the reference genome for BWA''','')
vars.Add('BOWTIE2_INDEX', '''The index of the reference genome for BOWTIE2''','')
vars.Add('STAR_INDEX', 'The directory path where to find Star genome index', '')

vars.Add('GENEPRED', 'The genome annotation in GenePred format', '')
vars.Add('HISAT2_EXTRA_PARAMS', '''Extra parameters to add to the HISAT2 aligner fixed '''\
         '''parameters '--dta --dta-cufflinks --rg-id <SAMPLE> --no-discordant '''\
         '''--no-mixed --no-overlap'. For instance, '--rna-strandness FR' if stranded reads'''\
         ''' are used.''', '')
vars.Add('CUFFLINKS_PARAMS', '''Cufflinks extra parameters. '''\
        '''F.i. '--library-type fr-firststrand' if dUTPs stranded library were used '''\
        '''for the sequencing''', '')
vars.Add('CUFFQUANT_EXTRA_PARAMS',
         'Cuffquant parameter options to specify. E.g. --frag-bias-correct $GENOME_FASTA '\
         ' --multi-read-correct --max-bundle-frags 9999999', '')
vars.Add('CUFFDIFF_EXTRA_PARAMS',
         'Cuffdiff parameter options to specify. E.g. --frag-bias-correct $GENOME_FASTA '\
         ' --multi-read-correct', '')
vars.Add('CIRI_EXTRA_PARAMS', 'CIRI additional parameters', '')
vars.Add('CIRCRNA_METHODS', 'Comma separated list of circRNA detection methods to use. '\
	     'Repeated values will be collapsed. Default: use all methods available (empty string)', 
         '')
vars.Add('TOGGLE_TRANSCRIPTOME_RECONSTRUCTION', 'Set True to enable transcriptome '\
         'reconstruction. Default only quantifies genes and transcripts from the given '\
         'annotation GTF file', 'False')
vars.Add('DIFF_EXP', 'Set True to enable differential expression computation. '\
	'Only available if more than one sample and more than one condition are given', 'False')
vars.Add('DESEQ', 'Set True to enable differential expression computation also with DESeq2. '\
	'Only available if more than one sample and more than one condition are given', 'False')
vars.Add('CUFFNORM_EXTRA_PARAMS', 'Extra parameters to use if using Cuffnorm',
	'--output-format cuffdiff')
vars.Add('QRE_FIND', 'Set True to toggle analysis of QKI response elements sequences', 'False')
vars.Add('READSTAT_METHODS', 'Comma separated list of methods to use for read statistics. '\
         'Currently supported: fastqc,fastx', 'fastqc')
vars.Add('MIN_METHODS', 'Number of methods that commmonly detect a circRNA to '\
                        'define the circRNA as reliable. If this value exceeds the number '\
                        'of methods specified, it will be set to the number of methods.', 2)
vars.Add('MIN_READS', 'Number of reads to consider a circRNA as expressed', 2)


env = Environment(ENV=os.environ, SHELL = '/bin/bash',
                  variables=vars)
Help(vars.GenerateHelpText(env))
unknown = vars.UnknownVariables()
if unknown:
    print "Run sample: unknown variables", unknown.keys()
    Exit(1)

META         = env['META']
CPUS         = env['CPUS']
GENOME_INDEX = env['GENOME_INDEX']
GENOME_FASTA = env['GENOME_FASTA']
PREPROCESSOR = env['PREPROCESSOR']
PREPROCESSOR_PARAMS = env['PREPROCESSOR_PARAMS']
ANNOTATION   = env['ANNOTATION']

SEGEMEHL_INDEX = env['SEGEMEHL_INDEX']
BWA_INDEX      = env['BWA_INDEX']
BWA_PARAMS     = env['BWA_PARAMS']
CIRI           = env['CIRI']
CIRI_EXTRA_PARAMS = env['CIRI_EXTRA_PARAMS']
BOWTIE2_INDEX  = env['BOWTIE2_INDEX']

STAR_INDEX = env['STAR_INDEX']
GENEPRED   = env['GENEPRED']

HISAT2_EXTRA_PARAMS = env['HISAT2_EXTRA_PARAMS']
CUFFLINKS_PARAMS    = env['CUFFLINKS_PARAMS']
CUFFQUANT_EXTRA_PARAMS = env['CUFFQUANT_EXTRA_PARAMS']
CUFFDIFF_EXTRA_PARAMS = env['CUFFDIFF_EXTRA_PARAMS']
CUFFNORM_EXTRA_PARAMS = env['CUFFNORM_EXTRA_PARAMS']

TOGGLE_TRANSCRIPTOME_RECONSTRUCTION = False
if env['TOGGLE_TRANSCRIPTOME_RECONSTRUCTION'] == 'True':
	TOGGLE_TRANSCRIPTOME_RECONSTRUCTION = True

CIRCRNA_METHODS = sorted(set([m.lower() for m in env['CIRCRNA_METHODS'].strip().split(',')]))

DIFF_EXP = False
if env['DIFF_EXP'] == 'True':
    DIFF_EXP = True

DESEQ = False
if env['DESEQ'] == 'True':
    DESEQ = True

env.SetDefault(ENABLE_FCIRCRNA = 'FALSE')

SCONSCRIPT_HOME = os.path.join(env['ENV']['CIRCOMPARA_HOME'], 'src')

samples_dir = 'samples'

## GRUB METADATA
samples     = defaultdict(list)
adapters    = defaultdict(str)
conditions  = defaultdict(set)
translocations  = set()

with open(META) as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        samples[row['sample']].append(os.path.abspath(row['file']))
        adapters[row['sample']] = row['adapter'] ##NB:last sample adapter row overwrites the previous
        conditions[row['condition']].add(row['sample'])
        try:
            for tr in row['translocation'].split('#'):
                if tr: translocations.add(tr)
        except KeyError as ke:
            #print str(ke) + ' not defined for sample ' + row['sample'] + '. Skipping.'
            pass

annotation_dir = 'junk2_dbs'

## PREPARE GENOME AND ANNOTATION FOR TRANSLOCATED SAMPLES
if translocations:
    
    env['ENABLE_FCIRCRNA'] = 'TRUE'

    ## RESET GENOME INDEXES TO BUILD TRANSLOCATED GENOME ONES
    GENOME_INDEX = ''
    SEGEMEHL_INDEX = ''
    BWA_INDEX == ''
    BOWTIE2_INDEX = ''
    STAR_INDEX = ''
    GENEPRED = ''

    ## COMPUTE TRANSLOCATED GENOME SEQUENCE AND GENE ANNOTATION
    env_translocate_genome = env.Clone()
    env_translocate_genome.Append(TRANSLOCATIONS = list(translocations))
    env_translocate_genome['GENOME'] = GENOME_FASTA
    #env_translocated_genome.Append(ANNOTATION = ANNOTATION)
    translocated_genome = env.SConscript(os.path.join(annotation_dir, 'junk2_translocate_genome'),
                                         src_dir = SCONSCRIPT_HOME,
                                         variant_dir = annotation_dir, duplicate = 0,
                                         exports = '''env_translocate_genome ''')
    GENOME_FASTA = File(translocated_genome[0][0]).abspath
    env['GENOME_FASTA'] = GENOME_FASTA
    ANNOTATION = File(translocated_genome[1][0]).abspath
else:
    #print "No translocations defined"
    translocated_genome = [[File(GENOME_FASTA)], [ANNOTATION]]

## BUILD READ ALIGNER PROGRAM GENOME INDEXES IF NOT PROVIDED BY THE USER
hisat2_index_suffixes  = ['.1.ht2', '.2.ht2', '.3.ht2', '.4.ht2',
                          '.5.ht2', '.6.ht2', '.7.ht2', '.8.ht2']
bowtie2_index_suffixes = ['.1.bt2', '.2.bt2', '.3.bt2', '.4.bt2', '.rev.1.bt2', '.rev.2.bt2']
bwa_index_suffixes     = ['.amb', '.ann', '.bwt', '.pac', '.sa']

indexes = {'HISAT2':    [GENOME_INDEX + suffix for suffix in hisat2_index_suffixes],
           'SEGEMEHL':  [SEGEMEHL_INDEX],
           'BWA':       [BWA_INDEX + suffix for suffix in bwa_index_suffixes],
           'BOWTIE2':   [BOWTIE2_INDEX + suffix for suffix in bowtie2_index_suffixes],
           'STAR':      [os.path.join(STAR_INDEX, 'SA')]}

genome_indexes_to_build = []
if GENOME_INDEX == '': genome_indexes_to_build.append('HISAT2')

if SEGEMEHL_INDEX == '' and (CIRCRNA_METHODS == [''] or 'testrealign' in CIRCRNA_METHODS):
	genome_indexes_to_build.append('SEGEMEHL')

if BWA_INDEX == '' and (CIRCRNA_METHODS == [''] or 'ciri' in CIRCRNA_METHODS):
	genome_indexes_to_build.append('BWA')

if BOWTIE2_INDEX == '' and (CIRCRNA_METHODS == [''] or 'findcirc' in CIRCRNA_METHODS):
	genome_indexes_to_build.append('BOWTIE2')

if STAR_INDEX == '' and (CIRCRNA_METHODS == [''] or 'circexplorer' in CIRCRNA_METHODS):
	genome_indexes_to_build.append('STAR')


if genome_indexes_to_build:

    env_build_indexes = env.Clone()
    env_build_indexes['INDEXES'] = ','.join(genome_indexes_to_build)
    env_build_indexes['CPUS']    = CPUS
    env_build_indexes['GENOME']  = GENOME_FASTA
    env_build_indexes['HISAT2_EXTRA_PARAMS']    = ''
    env_build_indexes['BWA_EXTRA_PARAMS']       = ''
    env_build_indexes['BOWTIE2_EXTRA_PARAMS']   = ''
    env_build_indexes['SEGEMEHL_EXTRA_PARAMS']  = ''
    env_build_indexes['STAR_EXTRA_PARAMS']      = ''

    indexes = SConscript(os.path.join(annotation_dir, 'junk2_build_indexes'),
                                src_dir = SCONSCRIPT_HOME,
                                variant_dir = annotation_dir, duplicate = 0,
                                exports = '''env_build_indexes ''')

    if GENOME_INDEX == '' :
	GENOME_INDEX	= os.path.abspath(str(indexes['HISAT2'][0]))[0:-6] #remove the .1.ht2 suffix

    if SEGEMEHL_INDEX == '' and (CIRCRNA_METHODS == [''] or 'testrealign' in CIRCRNA_METHODS):
	SEGEMEHL_INDEX	= os.path.abspath(str(indexes['SEGEMEHL'][0]))

    if BWA_INDEX    == '' and (CIRCRNA_METHODS == [''] or 'ciri' in CIRCRNA_METHODS):
	BWA_INDEX	= os.path.abspath(str(indexes['BWA'][0]))[0:-4] #remove the .amb suffix

    if BOWTIE2_INDEX == '' and (CIRCRNA_METHODS == [''] or 'findcirc' in CIRCRNA_METHODS):
	BOWTIE2_INDEX	= os.path.abspath(str(indexes['BOWTIE2'][0]))[0:-6] #remove .1.bt2 suffix

    if STAR_INDEX   == '' and (CIRCRNA_METHODS == [''] or 'circexplorer' in CIRCRNA_METHODS):
	STAR_INDEX	= os.path.dirname(os.path.abspath(str(indexes['STAR'][0]))) #index dir

    for k in indexes.keys():
	Depends(indexes[k], translocated_genome[0][0])

#    Depends(indexes['HISAT2'], translocated_genome[0][0])
#    Depends(indexes['SEGEMEHL'], translocated_genome[0][0])
#    Depends(indexes['BWA'], translocated_genome[0][0])
#    Depends(indexes['BOWTIE2'], translocated_genome[0][0])
#    Depends(indexes['STAR'], translocated_genome[0][0])

## CREATE genePred FILE FOR CIRCexplorer IF ONLY GTF ANNOTATION WERE PROVIDED
if GENEPRED == '' and (CIRCRNA_METHODS == [''] or 'circexplorer' in CIRCRNA_METHODS):
    genePred_targets = [os.path.join(annotation_dir, t) for t in ['genePred.transcripts.info',
                                                           '${SOURCES[0].filebase}.genePred',
                                                           '${SOURCES[0].filebase}.genePred.wgn']]
    genePred = env.Command(genePred_targets, File(ANNOTATION),
                           ['gtfToGenePred -infoOut=${TARGETS[0]} ${SOURCES[0]} ${TARGETS[1]}',
                            'cut -f9 ${TARGETS[0]} | grep -v geneName | '\
                            'paste - ${TARGETS[1]} > ${TARGETS[2]}']
                          )
    ## slow command
    #'cut -f1 ${TARGETS[1]} | grep -f - ${TARGETS[0]} | cut -f 9 | '\
    #'paste - ${TARGETS[1]} > ${TARGETS[2]}'
    GENEPRED = genePred[2]

## PROCESS SAMPLES
runs = []
for sample in sorted(samples.keys()):
    sample_cpus         = CPUS
    sample_genome_index = GENOME_INDEX
    sample_genome_fasta = GENOME_FASTA
    sample_preprocessor = PREPROCESSOR
    sample_preprocessor_params = PREPROCESSOR_PARAMS
    sample_adapter_file = adapters[sample]
    sample_annotation   = ANNOTATION
    sample_raw_reads    = samples[sample]

    segemehl_index      = SEGEMEHL_INDEX
    bwa_index           = BWA_INDEX
    bwa_params          = BWA_PARAMS
    ciri                = CIRI
    ciri_extra_parameters = CIRI_EXTRA_PARAMS
    bowtie2_index       = BOWTIE2_INDEX

    star_index  = STAR_INDEX
    gene_pred   = GENEPRED

    hisat2_extra_params = HISAT2_EXTRA_PARAMS
    cufflinks_params    = CUFFLINKS_PARAMS
    toggle_transcriptome_reconstruction = TOGGLE_TRANSCRIPTOME_RECONSTRUCTION

    circrna_methods = CIRCRNA_METHODS

    sample_dir = os.path.join(samples_dir, sample)
    run_sample = SConscript(os.path.join(sample_dir, 'junk2_circpipe'),
                            src_dir = SCONSCRIPT_HOME,
                            variant_dir = sample_dir, duplicate = 0,
                            exports = '''env sample_cpus sample_genome_index '''
                            '''sample_genome_fasta sample_preprocessor '''
                            '''sample_preprocessor_params '''
                            '''sample_adapter_file sample_annotation '''
                            '''sample_raw_reads segemehl_index bwa_index bwa_params '''
                            '''ciri bowtie2_index star_index gene_pred circrna_methods '''
                            '''hisat2_extra_params cufflinks_params ciri_extra_parameters '''
							'''toggle_transcriptome_reconstruction''')
    runs.append(run_sample)

    for k in indexes.keys():
	Depends(run_sample, indexes[k])

    if translocations:
	Depends(run_sample, translocated_genome)

#    Depends(run_sample, indexes['STAR'])
#    Depends(run_sample, indexes['HISAT2'])
#    Depends(run_sample, indexes['BOWTIE2'])
#    Depends(run_sample, indexes['SEGEMEHL'])
#    Depends(run_sample, indexes['BWA'])
    if CIRCRNA_METHODS == [''] or 'circexplorer' in CIRCRNA_METHODS:
	Depends(run_sample, GENEPRED) #genePred[2])


## MERGE SAMPLE TRANSCRIPTOMES IF TRANSCRIPTOMES WERE RECONSTRUCTED
def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el

def get_matching_nodes(nodelist, rexpression):
    files = []
    for node in flatten(nodelist):
        if re.match(rexpression, node.path):
            files.append(node)
    return files

cuffmerge_dir = 'cuffmerge'
if TOGGLE_TRANSCRIPTOME_RECONSTRUCTION:
    transcripts_gtf_files = get_matching_nodes(runs, '.*transcripts\.gtf')
    if len(transcripts_gtf_files) > 1:
       cuffmerge_cpus = CPUS
       cuffmerge_annotation = ANNOTATION
       cuffmerge_genome_fasta = GENOME_FASTA
       cuffmerge = SConscript(os.path.join(cuffmerge_dir, 'junk2_cuffmerge'),
                               src_dir = SCONSCRIPT_HOME,
                               variant_dir = cuffmerge_dir, duplicate = 0,
                               exports = 'env transcripts_gtf_files cuffmerge_cpus '''
                               '''cuffmerge_annotation cuffmerge_genome_fasta''')
    else:
        cuffmerge = transcripts_gtf_files
else:
    ## just to recycle 'cuffmerge' variable
    cuffmerge = ANNOTATION

## RETRIEVE TRANSCRIPT SEQUENCES
transcript_sequences_annotation = cuffmerge
transcript_sequences_genome = GENOME_FASTA
transcript_sequences_dir = 'transcript_sequences'
transcript_sequences = SConscript(os.path.join(transcript_sequences_dir, 
                                               'junk2_transcript_fastas'), 
                                  src_dir = SCONSCRIPT_HOME,
                                  variant_dir = transcript_sequences_dir, duplicate = 0,
                                  exports = '''env transcript_sequences_annotation '''
                                  '''transcript_sequences_genome''')

alignment_matching_regexp = '.*hisat2_out.*\.bam' #'.*mappings.*\.bam'
alignments = get_matching_nodes(runs, alignment_matching_regexp)

cuffquant_dir = 'cuffquant'
cuffdiff_dir = 'cuffdiff'
deseq_dir = 'deseq'

gene_exp = ''
if len(samples.keys()) > 1:

    ## QUANTIFY EXPRESSION WITH MERGED ANNOTATION
    cuffquant_annotation = cuffmerge
    cuffquant_alignments = alignments
    cuffquant_genome_fasta = GENOME_FASTA
    cuffquant_extra_params = CUFFQUANT_EXTRA_PARAMS

    cuffquant_cpus = CPUS

    cuffquant = SConscript(os.path.join(cuffquant_dir, 'junk2_cuffquant'),
                           src_dir = SCONSCRIPT_HOME,
                           variant_dir = cuffquant_dir, duplicate = 0,
                           exports = '''env cuffquant_alignments cuffquant_annotation '''
                           '''cuffquant_genome_fasta cuffquant_cpus cuffquant_extra_params''')

    Depends(cuffquant, [cuffmerge, alignments])

    if len(conditions.keys()) > 1 and DIFF_EXP:
        ## COMPUTE DIFFERENTIAL EXPRESSION: CUFFDIFF
        cuffdiff_cpus = CPUS
        cuffdiff_conditions = conditions
        cuffdiff_annotation = cuffmerge
        cuffdiff_quantities = get_matching_nodes(cuffquant, '.*\.cxb')
        cuffdiff_extra_params = CUFFDIFF_EXTRA_PARAMS
        cuffdiff = SConscript(os.path.join(cuffdiff_dir, 'junk2_cuffdiff'),
                              src_dir = SCONSCRIPT_HOME,
                              variant_dir = cuffdiff_dir, duplicate = 0,
                              exports = '''env cuffdiff_cpus cuffdiff_conditions '''
                              '''cuffdiff_annotation cuffdiff_quantities cuffdiff_extra_params''')
        
        Depends(cuffdiff, cuffquant)

        gene_exp = get_matching_nodes(cuffdiff, ".*genes.read_group_tracking")
        gene_meta = get_matching_nodes(cuffdiff, ".*read_groups.info")[0]

        if DESEQ:
            ## COMPUTE DIFFERENTIAL EXPRESSION: DESEQ
            deseq_annotation = cuffmerge
            deseq_alignments = get_matching_nodes(runs, alignment_matching_regexp)
            metafile = File(META).abspath
            deseq_cpus = CPUS
            deseq_stranded = 'no'
            if 'fr-firststrand' in CUFFLINKS_PARAMS:
            	deseq_stranded = 'yes'
            else:
            	deseq_stranded = 'no'
            deseq = SConscript(os.path.join(deseq_dir, 'junk2_DESeq'),
            					src_dir = SCONSCRIPT_HOME,
            					variant_dir = deseq_dir, duplicate = 0,
                                exports = '''env deseq_annotation deseq_alignments '''
                                        '''metafile deseq_cpus deseq_stranded ''')
            Depends(deseq, [cuffmerge, alignments])

    else:
        ## Normalize expression values: CUFFNORM
        env_cuffnorm = env.Clone()
        env_cuffnorm['CPUS'] = CPUS
        env_cuffnorm['ANNOTATION'] = cuffmerge
        env_cuffnorm['QUANT_FILES']= get_matching_nodes(cuffquant, '.*\.cxb')
        env_cuffnorm['EXTRA_PARAMS']= CUFFNORM_EXTRA_PARAMS #TODO: set strandness when required
        env_cuffnorm['LABELS'] = conditions

        cuffnorm = SConscript(os.path.join(cuffdiff_dir, 'junk2_cuffnorm'),
                              src_dir = SCONSCRIPT_HOME,
                              variant_dir = cuffdiff_dir, duplicate = 0,
                              exports = '''env_cuffnorm''')
        
        Depends(cuffnorm, cuffquant)

        gene_exp = get_matching_nodes(cuffnorm, ".*genes.read_group_tracking")
        gene_meta = get_matching_nodes(cuffnorm, ".*read_groups.info")[0]

else:
    gene_exp = get_matching_nodes(runs, '.*genes.fpkm_tracking')
    gene_meta = ''
    link_cufflinks_dir = env.Command(cuffdiff_dir, gene_exp[0].dir, SymLink)


## COLLECT CIRCRNA RESULTS
circRNA_collect_dir = 'circRNA_collection'

samples = sorted(samples.keys())

testrealign_nodes     = []
find_circ_nodes    = []
ciri_nodes         = []
CIRCexplorer_nodes = []

for sample in samples:
    testrealign_nodes.append(get_matching_nodes(runs, '.*' + sample + '.*' +\
                                             os.path.sep + 'splicesites\.bed'))
    find_circ_nodes.append(get_matching_nodes(runs, '.*' + sample + '.*' +\
                                              os.path.sep + 'circ_candidates\.bed'))
    ciri_nodes.append(get_matching_nodes(runs, '.*' + sample + '.*' +\
                                         os.path.sep + '.*_ciri\.out'))
    CIRCexplorer_nodes.append(get_matching_nodes(runs, '.*' + sample + '.*' +\
                                                os.path.sep + '.*CIRCexplorer_circ\.txt'))


## collect testrealign
CIRCexplorer_compared = None
ciri_compared = None
find_circ_compared = None
testrealign_compared = None

if not ''.join([str(f) for f in flatten(testrealign_nodes)]) == '':

    testrealign_files = ','.join([f.path for f in flatten(testrealign_nodes)])
    testrealign_labels = ','.join(samples)
    testrealign_comapared_cmd = os.path.join(SCONSCRIPT_HOME,
                             '''testrealign_compare.R -l ''' + testrealign_labels +\
                             ''' -i ''' + testrealign_files + ''' -o $TARGET''')
    testrealign_comapared_target = os.path.join(circRNA_collect_dir, 'testrealign_compared.csv')
    testrealign_compared = env.Command(testrealign_comapared_target, 
                                    testrealign_nodes, 
                                    testrealign_comapared_cmd)
    Depends(testrealign_compared, testrealign_nodes)

if not ''.join([str(f) for f in flatten(find_circ_nodes)]) == '':

    ## collect find_circ
    find_circ_files = ','.join([f.path for f in flatten(find_circ_nodes)])
    find_circ_labels = ','.join(samples)
    find_circ_comapared_cmd = os.path.join(SCONSCRIPT_HOME,
                             '''findcirc_compare.R -l ''' + find_circ_labels +\
                             ''' -i ''' + find_circ_files + ''' -o $TARGET''')
    find_circ_comapared_target = os.path.join(circRNA_collect_dir, 'find_circ_compared.csv')
    find_circ_compared = env.Command(find_circ_comapared_target, 
                                    find_circ_nodes, 
                                    find_circ_comapared_cmd)
    Depends(find_circ_compared, find_circ_nodes)
    
if not ''.join([str(f) for f in flatten(ciri_nodes)]) == '':

    ## collect CIRI
    ciri_files = ','.join([f.path for f in flatten(ciri_nodes)])
    ciri_labels = ','.join(samples)
    ciri_comapared_cmd = os.path.join(SCONSCRIPT_HOME,
                             '''ciri_compare.R -l ''' + ciri_labels +\
                             ''' -i ''' + ciri_files + ''' -o $TARGET''')
    ciri_comapared_target = os.path.join(circRNA_collect_dir, 'ciri_compared.csv')
    ciri_compared = env.Command(ciri_comapared_target, 
                                    ciri_nodes, 
                                    ciri_comapared_cmd)
    Depends(ciri_compared, ciri_nodes)
    
if not ''.join([str(f) for f in flatten(CIRCexplorer_nodes)]) == '':

    ## collect CIRCexplorer
    CIRCexplorer_files = ','.join([f.path for f in flatten(CIRCexplorer_nodes)])
    CIRCexplorer_labels = ','.join(samples)
    CIRCexplorer_comapared_cmd = os.path.join(SCONSCRIPT_HOME,
                             '''CIRCexplorer_compare.R -l ''' + CIRCexplorer_labels +\
                             ''' -i ''' + CIRCexplorer_files + ''' -o $TARGET''')
    CIRCexplorer_comapared_target = os.path.join(circRNA_collect_dir, 'CIRCexplorer_compared.csv')
    CIRCexplorer_compared = env.Command(CIRCexplorer_comapared_target, 
                                    CIRCexplorer_nodes, 
                                    CIRCexplorer_comapared_cmd)
    Depends(CIRCexplorer_compared, CIRCexplorer_nodes)
    
##COLLECT CIRCRNA ALIGNMENT NUMBER
# testrealign mapped reads
testrealign_mappings_pattern = '.*segemehl_mapped_reads_count\.txt'
# find_circ mapped reads
find_circ_mappings_pattern = '.*find_circ_mapped_reads_count\.txt'
# CIRI mapped reads
CIRI_mappings_pattern = '.*CIRI_mapped_reads_count\.txt'
# CIRCexplorer mapped reads
CIRCexplorer_mappings_pattern = '.*CIRCExplorer_mapped_reads_count\.txt'

testrealign_mappings     = get_matching_nodes(runs, testrealign_mappings_pattern)
find_circ_mappings    = get_matching_nodes(runs, find_circ_mappings_pattern)
ciri_mappings         = get_matching_nodes(runs, CIRI_mappings_pattern)
CIRCexplorer_mappings = get_matching_nodes(runs, CIRCexplorer_mappings_pattern)

collect_circrna_maps_counts_cmd = '''tail -n +1 ${SOURCES} > $TARGET '''
collect_circrna_maps_counts = env.Command(os.path.join(circRNA_collect_dir, 
                                                       'circrna_maps_counts.txt'), 
                                          [testrealign_mappings, find_circ_mappings, 
                                          ciri_mappings, CIRCexplorer_mappings], 
                                          collect_circrna_maps_counts_cmd)

## COLLECT CIRCRNA RESULTS
env_circrna_collect = env.Clone()
env_circrna_collect['CSVS'] = {'CIRCEXPLORER': CIRCexplorer_compared,
			'CIRI': ciri_compared,
			'FINDCIRC': find_circ_compared,
			'TESTREALIGN': testrealign_compared}
env_circrna_collect['GTF'] = cuffmerge
circrna_collect = SConscript(os.path.join(circRNA_collect_dir, 
                                          'junk2_circrna_collect'), 
                            src_dir = SCONSCRIPT_HOME, 
                            variant_dir = circRNA_collect_dir, duplicate = 0,
                            exports = '''env_circrna_collect''')

## ANALYZE AND REPORT CIRCRNAS                  
circrna_analyze_dir = 'circrna_analyze'
env_circrna_analyze = env.Clone()
env_circrna_analyze['CIRCRNAS'] = circrna_collect[1]
env_circrna_analyze['CIRCGENES'] = circrna_collect[0]
env_circrna_analyze['GENEEXP'] = gene_exp
env_circrna_analyze['GENEMETA'] = gene_meta
if int(env_circrna_analyze['MIN_METHODS']) > len(CIRCRNA_METHODS):
    env_circrna_analyze['MIN_METHODS'] = len(CIRCRNA_METHODS)

circrna_analyze = SConscript(os.path.join(circrna_analyze_dir, 
                                          'junk2_circrna_analyze'),
                            src_dir = SCONSCRIPT_HOME,
                            variant_dir = circrna_analyze_dir, duplicate = 0,
                            exports = '''env_circrna_analyze''')
Depends(circrna_analyze, gene_exp)

## collect read processing statistics
clean_reads_stats_files = get_matching_nodes(runs, '.*preprocess.*trimmomatic\.log')
mapped_reads_linear_stats_files = get_matching_nodes(runs, '.*processings.*hisat2\.log')
read_stats_collect_dir = 'read_stats_collect'
reads_stats_collect_cmd = '''grep Input ''' +\
                          ' '.join(f.path for f in clean_reads_stats_files) +\
                          ''' > $TARGET && cat ''' +\
                          ' '.join(f.path for f in mapped_reads_linear_stats_files) +\
                          ''' >> $TARGET'''
reads_stats_collect = env.Command(os.path.join(read_stats_collect_dir, 'read_stats_collect.txt'), 
                              [clean_reads_stats_files, mapped_reads_linear_stats_files],
                              reads_stats_collect_cmd)
#Depends(reads_stats_collect, runs)

qre_dir = 'qre'
if env['QRE_FIND'] == 'True':
    ## ANALYZE GENE SEQUENCES FOR QKI RESPONSE ELEMENTS
    qre_GTF = cuffmerge
    qre_GENOME = GENOME_FASTA
    qre = SConscript(os.path.join(qre_dir, 'junk2_QRE_finder'),
                     src_dir = SCONSCRIPT_HOME,
                     variant_dir = qre_dir, duplicate = 0,
                     exports = '''env qre_GTF qre_GENOME''')
    
    Depends(qre, [cuffmerge, alignments])


## CLEAN DIRS WHEN CLEANING TARGETS
Clean('.', samples_dir)
Clean('.', cuffmerge_dir)
Clean('.', transcript_sequences_dir)
Clean('.', cuffquant_dir)
Clean('.', cuffdiff_dir)
Clean('.', deseq_dir)
Clean('.', circRNA_collect_dir)
Clean('.', circrna_analyze_dir)
Clean('.', read_stats_collect_dir)
Clean('.', qre_dir)
Clean('.', annotation_dir)

'''
This SConscript performs RNA-seq analysis for each sample specified in the metadata file.
In addition, it merges transcript annotation derived from each samples and assess differential
gene and transcript expression among the samples.
The metadata file given as input must be comma separated and must have the following columns:

file        :the path to the reads file. If paired-end use one row per read file, 
             setting the same sample name
sample      :the sample name/ID  
condition   :biological condition, used for differential gene expression. 
adapter     :read adapter to trim (optional. leave empty string if not applicable)
translocation:sharp (#) separted list of the coordinates involving fusion genes/translocations, 
             defined as coords1&coords2 elements (optional)

meta.csv example:

file,sample,condition,adapter,translocation
/home/user/data/reads/SRR445566.fastq.gz,SRR445566,TUMOR,
/home/user/data/reads/SRR534325_1.fastq.gz,SRR534325,CONTROL,/trimmomatic/adapters/TruSeq3-PE-2.fa
/home/user/data/reads/SRR534325_2.fastq.gz,SRR534325,CONTROL,/trimmomatic/adapters/TruSeq3-PE-2.fa
/home/user/data/reads/SRR534326_1.fastq.gz,SRR534325,t(4;1)t(1;X),,4:90000-120000:+&11:20-30000:-#1:20-400:+&X:1000-2045:+
/home/user/data/reads/SRR534326_2.fastq.gz,SRR534325,CONTROL,t(4;1)t(1;X),4:90000-120000:+&11:20-30000:-#1:20-400:+&X:1000-2045:+

'''

import os, csv, itertools, collections, re, sys
from collections import defaultdict
from datetime import datetime

def print_cmd_line(s, targets, sources, env):
    '''This function controls the logging of commands'''
    try:
        LOGLEVEL = env['LOGLEVEL']
    except KeyError:
        LOGLEVEL = 0 # if not defined set base level as default

    colors = {}
    colors['cyan']   = '\033[96m'
    colors['purple'] = '\033[95m'
    colors['blue']   = '\033[94m'
    colors['green']  = '\033[92m'
    colors['yellow'] = '\033[93m'
    colors['red']    = '\033[91m'
    colors['end']    = '\033[0m'

    prefix = colors['purple'] + env['LOG_PREFIX'] + ' ' + colors['green'] +\
             str(datetime.now()) + colors['end']
    full_cmd = prefix + " %s\n" % s

    if GetOption("no_exec"): ## when no exec always print full commands
        outstr = colors['purple'] + env['LOG_PREFIX'] + colors['end'] +  " %s\n" % s
    else:
        ## Save real cmd to log file only if actual execution
        logfile = "circpipe_multi.log"
        try:
            logfile = env['CMD_LOGFILE']
        except KeyError:
            sys.stderr.write("Log file not defined. Set default " + logfile + "\n")
        open(logfile, 'a').write(full_cmd)
    
        outstr = "%s\n" % s ## log command only by default
    
        if LOGLEVEL == 1: ## log script-level only
            outstr = prefix + '\n'
        elif LOGLEVEL == 2: ## log script-level and targets 
            outstr = prefix + " %s ...\n"%(' and '.join([str(x) for x in targets]))
        elif LOGLEVEL == 3: ## log script-level and full command
            outstr = full_cmd
        elif LOGLEVEL == 4:
            prep = ' Building '
            if 'end_cmd_log' in s:
                prep = ' Done '
            outstr = prefix + '\n'.join([prep + str(x) + '...' for x in targets]) + '\n'

    # print to standard out
    sys.stdout.write(outstr)

## GET PROGRAM ARGUMENTS
vars = Variables('vars.py')
vars.Add('META', 'The metadata table file where you specify the project samples, etc.', 'meta.csv')
vars.Add('CPUS', 'Set number of CPUs', '4')
vars.Add('PREPROCESSOR', 'The preprocessing method', 'trimmomatic')
vars.Add('PREPROCESSOR_PARAMS', 
        '''Read preprocessor extra parameters. F.i. if Trimmomatic, an empty string '''\
        '''defaults to '''\
        '''MAXINFO:40:0.5 LEADING:20 TRAILING:20 SLIDINGWINDOW:4:30 MINLEN:50 AVGQUAL:30 ''', 
        '')
vars.Add('ANNOTATION', 'Gene annotation (Ensembl GFF)', '')
vars.Add('GENOME_FASTA', 'The FASTA file with the reference genome', '')
vars.Add('CIRI', 'The full path to the CIRI_vx.x.pl perl script', '')
vars.Add('BWA_PARAMS','Extra parameters for BWA','')

vars.Add('GENOME_INDEX', '''The index of the reference genome for HISAT2''', '')
vars.Add('SEGEMEHL_INDEX', '''The .idx index for segemehl''', '')
vars.Add('BWA_INDEX', '''The index of the reference genome for BWA''','')
vars.Add('BOWTIE2_INDEX', '''The index of the reference genome for BOWTIE2''','')
vars.Add('STAR_INDEX', 'The directory path where to find Star genome index', '')

vars.Add('GENEPRED', 'The genome annotation in GenePred format', '')
vars.Add('HISAT2_EXTRA_PARAMS', '''Extra parameters to add to the HISAT2 aligner fixed '''\
         '''parameters '--dta --dta-cufflinks --rg-id <SAMPLE> --no-discordant '''\
         '''--no-mixed --no-overlap'. For instance, '--rna-strandness FR' if stranded reads'''\
         ''' are used.''', '')
vars.Add('CUFFLINKS_PARAMS', '''Cufflinks extra parameters. '''\
        '''F.i. '--library-type fr-firststrand' if dUTPs stranded library were used '''\
        '''for the sequencing''', '')
vars.Add('CUFFQUANT_EXTRA_PARAMS', 
         'Cuffquant parameter options to specify. E.g. --frag-bias-correct $GENOME_FASTA '\
         ' --multi-read-correct --max-bundle-frags 9999999', '')
vars.Add('CUFFDIFF_EXTRA_PARAMS', 
         'Cuffdiff parameter options to specify. E.g. --frag-bias-correct $GENOME_FASTA '\
         ' --multi-read-correct', '')
vars.Add('LOGLEVEL', '''Logging verbosity''', 1)
vars.Add('CMD_LOGFILE', '''Log file''', 'circpipe_multi.log')

env = Environment(ENV=os.environ, SHELL = '/bin/bash',
                  variables=vars)
Help(vars.GenerateHelpText(env))
unknown = vars.UnknownVariables()
if unknown:
    print "Run sample: unknown variables", unknown.keys()
    Exit(1)

log_id = "[CIRCPIPE MULTI]"
## pretty logging
env['PRINT_CMD_LINE_FUNC'] = print_cmd_line
try:
    env['LOG_PREFIX'] = env['LOG_PREFIX'] + log_id
except KeyError:
    env['LOG_PREFIX'] = log_id

#env['ENDCMDLOG'] = end_cmd_log

META         = env['META']
CPUS         = env['CPUS']
GENOME_INDEX = env['GENOME_INDEX']
GENOME_FASTA = env['GENOME_FASTA']
PREPROCESSOR = env['PREPROCESSOR']
PREPROCESSOR_PARAMS = env['PREPROCESSOR_PARAMS']
ANNOTATION   = env['ANNOTATION']

SEGEMEHL_INDEX = env['SEGEMEHL_INDEX'] 
BWA_INDEX      = env['BWA_INDEX']
BWA_PARAMS     = env['BWA_PARAMS']
CIRI           = env['CIRI']
BOWTIE2_INDEX  = env['BOWTIE2_INDEX']
    
STAR_INDEX = env['STAR_INDEX']
GENEPRED   = env['GENEPRED']

HISAT2_EXTRA_PARAMS = env['HISAT2_EXTRA_PARAMS']
CUFFLINKS_PARAMS    = env['CUFFLINKS_PARAMS']
CUFFQUANT_EXTRA_PARAMS = env['CUFFQUANT_EXTRA_PARAMS']
CUFFDIFF_EXTRA_PARAMS = env['CUFFDIFF_EXTRA_PARAMS']

SCONSCRIPT_HOME = os.path.join(env['ENV']['JUNK2_HOME'], 'src')

samples_dir = 'samples'

## GRUB METADATA
samples     = defaultdict(list)
adapters    = defaultdict(str)
conditions  = defaultdict(set)
translocations  = set()

with open(META) as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        samples[row['sample']].append(os.path.abspath(row['file']))
        adapters[row['sample']] = row['adapter'] ##NB:last sample adapter row overwrites the previous
        conditions[row['condition']].add(row['sample'])
        try:
            for tr in row['translocation'].split('#'): 
                if tr: translocations.add(tr) 
        except KeyError as ke:
            print str(ke) + ' not defined for sample ' + row['sample'] + '. Skipping.'

annotation_dir = 'junk2_dbs'


## PREPARE GENOME AND ANNOTATION FOR TRANSLOCATED SAMPLES
if translocations:
    ## RESET GENOME INDEXES TO BUILD TRANSLOCATED GENOME ONES
    GENOME_INDEX = ''
    SEGEMEHL_INDEX = ''
    BWA_INDEX == ''
    BOWTIE2_INDEX = ''
    STAR_INDEX = ''
    GENEPRED = ''

    ## COMPUTE TRANSLOCATED GENOME SEQUENCE AND GENE ANNOTATION
    env_translocate_genome = env
    env_translocate_genome.Append(TRANSLOCATIONS = list(translocations))
    env_translocate_genome['GENOME'] = GENOME_FASTA
    #env_translocated_genome.Append(ANNOTATION = ANNOTATION)
    translocated_genome = env.SConscript(os.path.join(annotation_dir, 'junk2_translocate_genome'),
                                         src_dir = SCONSCRIPT_HOME, 
                                         variant_dir = annotation_dir, duplicate = 0, 
                                         exports = '''env_translocate_genome ''')
    GENOME_FASTA = File(translocated_genome[0][0]).abspath
    env['GENOME_FASTA'] = GENOME_FASTA
    ANNOTATION = File(translocated_genome[1][0]).abspath
else:
    print "No translocations defined"
    translocated_genome = [[File(GENOME_FASTA)], [ANNOTATION]]

## BUILD READ ALIGNER PROGRAM GENOME INDEXES IF NOT PROVIDED BY THE USER
genome_indexes_to_build = []
if GENOME_INDEX == '': genome_indexes_to_build.append('HISAT2')
if SEGEMEHL_INDEX == '': genome_indexes_to_build.append('SEGEMEHL')
if BWA_INDEX == '': genome_indexes_to_build.append('BWA')
if BOWTIE2_INDEX == '': genome_indexes_to_build.append('BOWTIE2')
if STAR_INDEX == '': genome_indexes_to_build.append('STAR')


if genome_indexes_to_build:

    env_build_indexes = env
    env_build_indexes['INDEXES'] = ','.join(genome_indexes_to_build)
    env_build_indexes['CPUS']    = CPUS
    env_build_indexes['GENOME']  = GENOME_FASTA
    env_build_indexes['HISAT2_EXTRA_PARAMS']    = ''
    env_build_indexes['BWA_EXTRA_PARAMS']       = ''
    env_build_indexes['BOWTIE2_EXTRA_PARAMS']   = ''
    env_build_indexes['SEGEMEHL_EXTRA_PARAMS']  = ''
    env_build_indexes['STAR_EXTRA_PARAMS']      = ''
    
    indexes = SConscript(os.path.join(annotation_dir, 'junk2_build_indexes'), 
                                src_dir = SCONSCRIPT_HOME, 
                                variant_dir = annotation_dir, duplicate = 0,
                                exports = '''env_build_indexes ''')

    if GENOME_INDEX == '' :GENOME_INDEX   = os.path.abspath(str(indexes['HISAT2'][0]))[0:-6] 
                                              #remove the .1.ht2 suffix
    if SEGEMEHL_INDEX == '':SEGEMEHL_INDEX= os.path.abspath(str(indexes['SEGEMEHL'][0]))
    if BWA_INDEX    == '' :BWA_INDEX      = os.path.abspath(str(indexes['BWA'][0]))[0:-4] 
                                              #remove the .amb suffix
    if BOWTIE2_INDEX == '':BOWTIE2_INDEX  = os.path.abspath(str(indexes['BOWTIE2'][0]))[0:-6]
                                              #remove .1.bt2 suffix
    if STAR_INDEX   == '' :STAR_INDEX = os.path.dirname(os.path.abspath(str(indexes['STAR'][0]))) 
                                              #index dir
    Depends(indexes['HISAT2'], translocated_genome[0][0])
    Depends(indexes['SEGEMEHL'], translocated_genome[0][0])
    Depends(indexes['BWA'], translocated_genome[0][0])
    Depends(indexes['BOWTIE2'], translocated_genome[0][0])
    Depends(indexes['STAR'], translocated_genome[0][0])

## CREATE genePred FILE FOR CIRCexplorer IF ONLY GTF ANNOTATION WERE PROVIDED
if GENEPRED == '':
    genePred_targets = [os.path.join(annotation_dir, t) for t in ['genePred.transcripts.info', 
                                                           '${SOURCES[0].filebase}.genePred', 
                                                           '${SOURCES[0].filebase}.genePred.wgn']]
    genePred = env.Command(genePred_targets, File(ANNOTATION), 
                           ['gtfToGenePred -infoOut=${TARGETS[0]} ${SOURCES[0]} ${TARGETS[1]}',
                            'cut -f9 ${TARGETS[0]} | grep -v geneName | '\
                            'paste - ${TARGETS[1]} > ${TARGETS[2]}']
                          )
    ## slow command
    #'cut -f1 ${TARGETS[1]} | grep -f - ${TARGETS[0]} | cut -f 9 | '\
    #'paste - ${TARGETS[1]} > ${TARGETS[2]}'
    GENEPRED = genePred[2]

## PROCESS SAMPLES
runs = []
for sample in sorted(samples.keys()):
    sample_cpus         = CPUS
    sample_genome_index = GENOME_INDEX
    sample_genome_fasta = GENOME_FASTA
    sample_preprocessor = PREPROCESSOR
    sample_preprocessor_params = PREPROCESSOR_PARAMS
    sample_adapter_file = adapters[sample]
    sample_annotation   = ANNOTATION
    sample_raw_reads    = samples[sample]

    segemehl_index      = SEGEMEHL_INDEX
    bwa_index           = BWA_INDEX     
    bwa_params          = BWA_PARAMS    
    ciri                = CIRI          
    bowtie2_index       = BOWTIE2_INDEX 

    star_index  = STAR_INDEX 
    gene_pred   = GENEPRED

    hisat2_extra_params = HISAT2_EXTRA_PARAMS 
    cufflinks_params    = CUFFLINKS_PARAMS

    sample_dir = os.path.join(samples_dir, sample)
    run_sample = SConscript(os.path.join(sample_dir, 'junk2_circpipe'), 
                            src_dir = SCONSCRIPT_HOME, 
                            variant_dir = sample_dir, duplicate = 0,
                            exports = '''env sample_cpus sample_genome_index '''
                            '''sample_genome_fasta sample_preprocessor '''
                            '''sample_preprocessor_params '''
                            '''sample_adapter_file sample_annotation '''
                            '''sample_raw_reads segemehl_index bwa_index bwa_params '''
                            '''ciri bowtie2_index star_index gene_pred '''
                            '''hisat2_extra_params cufflinks_params''')
    runs.append(run_sample)
    Depends(run_sample, indexes['STAR'])
    Depends(run_sample, indexes['HISAT2'])
    Depends(run_sample, indexes['BOWTIE2'])
    Depends(run_sample, indexes['SEGEMEHL'])
    Depends(run_sample, indexes['BWA'])
    Depends(run_sample, genePred[2])


## MERGE SAMPLE TRANSCRIPTOMES
def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el

def get_matching_nodes(nodelist, rexpression):
    files = []
    for node in flatten(nodelist):
        if re.match(rexpression, node.path):
            files.append(node)
    return files

transcripts_gtf_files = get_matching_nodes(runs, '.*transcripts\.gtf')
cuffmerge_cpus = CPUS
cuffmerge_annotation = ANNOTATION
cuffmerge_genome_fasta = GENOME_FASTA
cuffmerge_dir = 'cuffmerge'
cuffmerge = SConscript(os.path.join(cuffmerge_dir, 'junk2_cuffmerge'),
                       src_dir = SCONSCRIPT_HOME,
                       variant_dir = cuffmerge_dir, duplicate = 0,
                       exports = 'env transcripts_gtf_files cuffmerge_cpus '''
                       '''cuffmerge_annotation cuffmerge_genome_fasta''')

## RETRIEVE TRANSCRIPT SEQUENCES
transcript_sequences_annotation = cuffmerge
transcript_sequences_genome = GENOME_FASTA
transcript_sequences_dir = 'transcript_sequences'
transcript_sequences = SConscript(os.path.join(transcript_sequences_dir, 
                                               'junk2_transcript_fastas'), 
                                  src_dir = SCONSCRIPT_HOME,
                                  variant_dir = transcript_sequences_dir, duplicate = 0,
                                  exports = '''env transcript_sequences_annotation '''
                                  '''transcript_sequences_genome''')

## QUANTIFY EXPRESSION WITH MERGED ANNOTATION
cuffquant_annotation = cuffmerge
alignment_matching_regexp = '.*hisat2_out.*\.bam' #'.*mappings.*\.bam'
alignments = get_matching_nodes(runs, alignment_matching_regexp)
cuffquant_alignments = alignments
cuffquant_genome_fasta = GENOME_FASTA
cuffquant_extra_params = CUFFQUANT_EXTRA_PARAMS

cuffquant_dir = 'cuffquant'
cuffquant_cpus = CPUS

cuffquant = SConscript(os.path.join(cuffquant_dir, 'junk2_cuffquant'),
                       src_dir = SCONSCRIPT_HOME,
                       variant_dir = cuffquant_dir, duplicate = 0,
                       exports = '''env cuffquant_alignments cuffquant_annotation '''
                       '''cuffquant_genome_fasta cuffquant_cpus cuffquant_extra_params''')

Depends(cuffquant, [cuffmerge, alignments])

## COMPUTE DIFFERENTIAL EXPRESSION: CUFFDIFF
cuffdiff_cpus = CPUS
cuffdiff_conditions = conditions
cuffdiff_annotation = cuffmerge
cuffdiff_quantities = get_matching_nodes(cuffquant, '.*\.cxb')
cuffdiff_extra_params = CUFFDIFF_EXTRA_PARAMS
cuffdiff_dir = 'cuffdiff'
cuffdiff = SConscript(os.path.join(cuffdiff_dir, 'junk2_cuffdiff'),
                      src_dir = SCONSCRIPT_HOME,
                      variant_dir = cuffdiff_dir, duplicate = 0,
                      exports = '''env cuffdiff_cpus cuffdiff_conditions '''
                      '''cuffdiff_annotation cuffdiff_quantities cuffdiff_extra_params''')

Depends(cuffdiff, cuffquant)

## COMPUTE DIFFERENTIAL EXPRESSION: DESEQ
deseq_annotation = cuffmerge
deseq_alignments = get_matching_nodes(runs, alignment_matching_regexp)
metafile = File(META).abspath
deseq_cpus = CPUS
deseq_stranded = 'no'
if 'fr-firststrand' in CUFFLINKS_PARAMS:
    deseq_stranded = 'yes'
else:
    deseq_stranded = 'no'
deseq_dir = 'deseq'
deseq = SConscript(os.path.join(deseq_dir, 'junk2_DESeq'),
                   src_dir = SCONSCRIPT_HOME,
                   variant_dir = deseq_dir, duplicate = 0,
                   exports = '''env deseq_annotation deseq_alignments '''
                             '''metafile deseq_cpus deseq_stranded ''')
Depends(deseq, [cuffmerge, alignments])

## COLLECT CIRCRNA RESULTS
circRNA_collect_dir = 'circRNA_collection'

samples = sorted(samples.keys())

segecirc_nodes     = [] 
find_circ_nodes    = []
ciri_nodes         = []
CIRCexplorer_nodes = []

for sample in samples:
    segecirc_nodes.append(get_matching_nodes(runs, '.*' + sample + '.*' +\
                                             os.path.sep + 'splicesites\.bed'))
    find_circ_nodes.append(get_matching_nodes(runs, '.*' + sample + '.*' +\
                                              os.path.sep + 'circ_candidates\.bed'))
    ciri_nodes.append(get_matching_nodes(runs, '.*' + sample + '.*' +\
                                         os.path.sep + '.*_ciri\.out'))
    CIRCexplorer_nodes.append(get_matching_nodes(runs, '.*' + sample + '.*' +\
                                                os.path.sep + '.*CIRCexplorer_circ\.txt'))

## collect segecirc
segecirc_files = ','.join([f.path for f in flatten(segecirc_nodes)])
segecirc_labels = ','.join(samples)
segecirc_comapared_cmd = os.path.join(SCONSCRIPT_HOME,
                         '''segecirc_compare.R -l ''' + segecirc_labels +\
                         ''' -i ''' + segecirc_files + ''' -o $TARGET''')
segecirc_comapared_target = os.path.join(circRNA_collect_dir, 'segecirc_compared.csv')
segecirc_compared = env.Command(segecirc_comapared_target, 
                                segecirc_nodes, 
                                segecirc_comapared_cmd)
Depends(segecirc_compared, segecirc_nodes)

## collect find_circ
find_circ_files = ','.join([f.path for f in flatten(find_circ_nodes)])
find_circ_labels = ','.join(samples)
find_circ_comapared_cmd = os.path.join(SCONSCRIPT_HOME,
                         '''findcirc_compare.R -l ''' + find_circ_labels +\
                         ''' -i ''' + find_circ_files + ''' -o $TARGET''')
find_circ_comapared_target = os.path.join(circRNA_collect_dir, 'find_circ_compared.csv')
find_circ_compared = env.Command(find_circ_comapared_target, 
                                find_circ_nodes, 
                                find_circ_comapared_cmd)
Depends(find_circ_compared, find_circ_nodes)

## collect CIRI
ciri_files = ','.join([f.path for f in flatten(ciri_nodes)])
ciri_labels = ','.join(samples)
ciri_comapared_cmd = os.path.join(SCONSCRIPT_HOME,
                         '''ciri_compare.R -l ''' + ciri_labels +\
                         ''' -i ''' + ciri_files + ''' -o $TARGET''')
ciri_comapared_target = os.path.join(circRNA_collect_dir, 'ciri_compared.csv')
ciri_compared = env.Command(ciri_comapared_target, 
                                ciri_nodes, 
                                ciri_comapared_cmd)
Depends(ciri_compared, ciri_nodes)

## collect CIRCexplorer
CIRCexplorer_files = ','.join([f.path for f in flatten(CIRCexplorer_nodes)])
CIRCexplorer_labels = ','.join(samples)
CIRCexplorer_comapared_cmd = os.path.join(SCONSCRIPT_HOME,
                         '''CIRCexplorer_compare.R -l ''' + CIRCexplorer_labels +\
                         ''' -i ''' + CIRCexplorer_files + ''' -o $TARGET''')
CIRCexplorer_comapared_target = os.path.join(circRNA_collect_dir, 'CIRCexplorer_compared.csv')
CIRCexplorer_compared = env.Command(CIRCexplorer_comapared_target, 
                                CIRCexplorer_nodes, 
                                CIRCexplorer_comapared_cmd)
Depends(CIRCexplorer_compared, CIRCexplorer_nodes)

##COLLECT CIRCRNA ALIGNMENT NUMBER
# segecirc mapped reads
segecirc_mappings_pattern = '.*segemehl_mapped_reads_count\.txt'
# find_circ mapped reads
find_circ_mappings_pattern = '.*find_circ_mapped_reads_count\.txt'
# CIRI mapped reads
CIRI_mappings_pattern = '.*CIRI_mapped_reads_count\.txt'
# CIRCexplorer mapped reads
CIRCexplorer_mappings_pattern = '.*CIRCExplorer_mapped_reads_count\.txt'

segecirc_mappings     = get_matching_nodes(runs, segecirc_mappings_pattern)
find_circ_mappings    = get_matching_nodes(runs, find_circ_mappings_pattern)
ciri_mappings         = get_matching_nodes(runs, CIRI_mappings_pattern)
CIRCexplorer_mappings = get_matching_nodes(runs, CIRCexplorer_mappings_pattern)

collect_circrna_maps_counts_cmd = '''tail -n +1 ${SOURCES} > $TARGET '''
collect_circrna_maps_counts = env.Command(os.path.join(circRNA_collect_dir, 
                                                       'circrna_maps_counts.txt'), 
                                          [segecirc_mappings, find_circ_mappings, 
                                          ciri_mappings, CIRCexplorer_mappings], 
                                          collect_circrna_maps_counts_cmd)

## ANALYZE COLLECTED CIRCRNA RESULTS
circrna_analyze_dir = circRNA_collect_dir
circrna_analyze_circexplorer = CIRCexplorer_compared
circrna_analyze_ciri         = ciri_compared
circrna_analyze_findcirc     = find_circ_compared
circrna_analyze_segecirc     = segecirc_compared
circrna_analyze_GTF          = cuffmerge
circrna_analyze = SConscript(os.path.join(circrna_analyze_dir, 'junk2_circrna_collect_analyze'), 
                            src_dir = SCONSCRIPT_HOME, 
                            variant_dir = circrna_analyze_dir, duplicate = 0,
                            exports = '''env circrna_analyze_circexplorer '''
                                      '''circrna_analyze_ciri circrna_analyze_findcirc '''
                                      '''circrna_analyze_segecirc circrna_analyze_GTF''')
Depends(circrna_analyze, [cuffmerge, CIRCexplorer_compared, ciri_compared, 
                          find_circ_compared, segecirc_compared])

## collect read processing statistics
clean_reads_stats_files = get_matching_nodes(runs, '.*preprocess.*trimmomatic\.log')
mapped_reads_linear_stats_files = get_matching_nodes(runs, 'processings.*_hisat2\.log')
read_stats_collect_dir = 'read_stats_collect'
reads_stats_collect_cmd = '''grep Input `find . -name "*trimmomatic.log"` > $TARGET;'''\
                      '''grep .* `find . -name "*hisat2.log"` >> $TARGET'''
reads_stats_collect = env.Command(os.path.join(read_stats_collect_dir, 'read_stats_collect.txt'), 
                              [clean_reads_stats_files, mapped_reads_linear_stats_files],
                              reads_stats_collect_cmd)


## ANALYZE GENE SEQUENCES FOR QKI RESPONSE ELEMENTS
qre_dir = 'qre'
qre_GTF = cuffmerge
qre_GENOME = GENOME_FASTA
qre = SConscript(os.path.join(qre_dir, 'junk2_QRE_finder'),
                 src_dir = SCONSCRIPT_HOME,
                 variant_dir = qre_dir, duplicate = 0,
                 exports = '''env qre_GTF qre_GENOME''')

Depends(qre, [cuffmerge, alignments])


## CLEAN DIRS WHEN CLEANING TARGETS
Clean('.', samples_dir)
Clean('.', cuffmerge_dir)
Clean('.', transcript_sequences_dir)
Clean('.', cuffquant_dir)
Clean('.', cuffdiff_dir)
Clean('.', deseq_dir)
Clean('.', circRNA_collect_dir)
Clean('.', read_stats_collect_dir)
Clean('.', qre_dir)
Clean('.', annotation_dir)

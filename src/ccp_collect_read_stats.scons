import os 

Import('*')

try:
    env = env_collect_read_stats.Clone()
except NameError, ne:
    vars = Variables('vars.py')
    vars.Add('', '', '')

    env = Environment(ENV=os.environ, SHELL = '/bin/bash',
                      variables=vars)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Run sample: unknown variables", unknown.keys()
        Exit(1)

runs = env['RUNS']

## COLLECT AND REPORT READ PROCESSING STATISTICS
clean_reads_stats_files = get_matching_nodes(runs, '.*preprocess.*trimmomatic\.log')
mapped_reads_linear_stats_files = get_matching_nodes(runs, '.*processings.*hisat2\.log')
read_stats_collect_dir = 'read_stats_collect'
reads_stats_collect_cmd = '''grep --with-filename Input ''' +\
                          ' '.join(f.path for f in clean_reads_stats_files) +\
                          ''' > $TARGET && grep --with-filename "." ''' +\
                          ' '.join(f.path for f in mapped_reads_linear_stats_files) +\
                          ''' >> $TARGET'''
reads_stats_collect = env.Command(os.path.join(read_stats_collect_dir, 'read_stats_collect.txt'), 
                              [clean_reads_stats_files, mapped_reads_linear_stats_files],
                              reads_stats_collect_cmd)


##COLLECT CIRCRNA ALIGNMENT NUMBER
# testrealign mapped reads
testrealign_mappings_pattern = '.*segemehl_mapped_reads_count\.txt'
# find_circ mapped reads
find_circ_mappings_pattern = '.*find_circ_mapped_reads_count\.txt'
# CIRI mapped reads
CIRI_mappings_pattern = '.*CIRI_mapped_reads_count\.txt'
# CIRCexplorer mapped reads
CIRCexplorer_mappings_pattern = '.*CIRCExplorer_mapped_reads_count\.txt'
# BWA mapped reads
BWA_mappings_pattern = '.*BWA_mapped_reads_count\.txt'
# STAR mapped reads
STAR_mappings_pattern = '.*STAR_mapped_reads_count\.txt'
# TopHat mapped reads
tophat_mappings_pattern = '.*tophat_mapped_reads_count\.txt'

testrealign_mappings  = get_matching_nodes(runs, testrealign_mappings_pattern)
find_circ_mappings    = get_matching_nodes(runs, find_circ_mappings_pattern)
ciri_mappings         = get_matching_nodes(runs, CIRI_mappings_pattern)
CIRCexplorer_mappings = get_matching_nodes(runs, CIRCexplorer_mappings_pattern)
bwa_mappings          = get_matching_nodes(runs, BWA_mappings_pattern)
star_mappings         = get_matching_nodes(runs, STAR_mappings_pattern)
tophat_mappings       = get_matching_nodes(runs, tophat_mappings_pattern)

collect_circrna_maps_counts_sources = [testrealign_mappings, find_circ_mappings, 
                                       ciri_mappings, CIRCexplorer_mappings,
				       bwa_mappings, star_mappings, 
				       tophat_mappings]

if len(set(Flatten(collect_circrna_maps_counts_sources))) > 0:
    collect_circrna_maps_counts_cmd = '''tail -n +1 ${SOURCES} > $TARGET '''
else:
    collect_circrna_maps_counts_cmd = '''touch $TARGET '''

collect_circrna_maps_counts = env.Command(os.path.join(read_stats_collect_dir, 
                                                       'circrna_maps_counts.txt'), 
                                          collect_circrna_maps_counts_sources, 
                                          collect_circrna_maps_counts_cmd)

## report read processing statistics
read_stats_report_cmd = '''Rscript -e 'results.dir <- dirname("$TARGET.abspath"); '''\
                        '''read_stats_collect.file <- "${SOURCES[0].abspath}"; '''\
                        '''linear.mapper <- "hisat2"; '''\
                        '''circrna.reads.stats.file <- "${SOURCES[1].abspath}"; '''\
                        '''meta_file <- "${SOURCES[2].abspath}"; '''\
                        '''rmarkdown::render(input = "$SCONSCRIPT_HOME/read_statistics.Rmd",'''\
                        '''output_file = "$TARGET.abspath", '''\
                        '''intermediates_dir = dirname("$TARGET.abspath") )' '''

read_stats_report = env.Command(os.path.join(read_stats_collect_dir, 'read_statistics.html'),
                                [reads_stats_collect, collect_circrna_maps_counts, 
                                File(env['META']).abspath, 
				collect_circrna_maps_counts_sources],
                                read_stats_report_cmd)


Clean('.', read_stats_collect_dir)

results = {'READ_MAPS_COUNTS': collect_circrna_maps_counts, 
           'READS_STATS_REPORT': read_stats_report}

Return('results')

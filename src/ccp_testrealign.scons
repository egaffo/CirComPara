'''
This SConscript filters segemehl results using custom script to obtain backsplices.
Formerly, it predicted circular RNAs by means of the
testrealign.x program of segemehl [1]
    
[1] Hoffmann, S. et al. 
    
    A multi-split mapping algorithm for circular RNA, splicing, 
    trans-splicing and fusion detection. 
    
    Genome Biology 15, R34 (2014).

'''

import os

Import('*')

try:
    env = env_testrealign.Clone()
except NameError:
    vars = Variables('vars.py')
    vars.Add('SAMPLE', 'The sample name', 'sample')
    vars.Add('BED', 'The BED file output by Segemehl', 
             'sample.sngl.bed')
    
    env = Environment(ENV=os.environ,
                      variables=vars)
    
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

## EXTRACT CIRCULAR SPLICE EVENTS, COLLECT SPLICE JUNCTIONS 
## AND FILTER BY MAPPING QUALITY
collect_splice_cmd = "filter_segemehl.R -i $SOURCE $TESTREALIGN_PARAMS "\
                     "-o ${TARGETS[0]} -r ${TARGETS[1]}"
collect_splice_targets = ["splicesites.bed", "${SAMPLE}.circular.reads.bed.gz"]
collect_splice = env.Command(collect_splice_targets, 
                             env['BED'],
                             collect_splice_cmd)

## COLLECT BACKSPLICED READS
bks_reads_cmd = '''zcat ${SOURCES[0]} | cut -f 4 | sort | uniq -c | '''\
                '''sed -E "s/[^0-9]*([0-9]+)[ ]+([^ ]+)[ ]*/\\1\\t\\2/g" | '''\
                '''sort -k1,1nr > ${TARGETS[0]} '''

bks_reads = env.Command([env['SAMPLE'] + '.testrealign.bks.reads'], 
                        collect_splice_targets[1],
                        bks_reads_cmd)

circ_bed = collect_splice[0]
circ_reads = collect_splice[1]
Return('circ_bed', 'circ_reads', 'bks_reads')


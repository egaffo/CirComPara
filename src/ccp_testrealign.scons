'''
This SConscript performs circular RNAs detection by means of the
testrealign.x program of segemehl [1]
    
[1] Hoffmann, S. et al. 
    
    A multi-split mapping algorithm for circular RNA, splicing, 
    trans-splicing and fusion detection. 
    
    Genome Biology 15, R34 (2014).

Software dependencies:
 * testrealign.x
 * Samtools-1.1
 * grep, cut, sort

When called from a SConscript it imports the following variables:
 * mapping_file
 * sample_name
 * segemehlcirc_cpus
 * segemehlcirc_genome_fasta

'''

import os

Import('*')

try:
    env = env_testrealign.Clone()
except NameError:
    vars = Variables('vars.py')
    vars.Add('CPUS', 'Number of parallel jobs', '4')
    vars.Add('ALIGNMENTS', 'Sorted alignment file in gzipped SAM format from'\
                           'segemehl', '')
    vars.Add('SAMPLE', 'The sample name', 'sample')
    vars.Add('GENOME_FASTA', 'The FASTA file with genome sequence', 'genome.fa')
    
    env = Environment(ENV=os.environ,
                      variables=vars)
    
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

## EXTRACT CIRCULAR SPLICE EVENTS
extract_circular_cmd = "grep ';B\\|C;' ${SOURCES[0]} > $TARGET"
extract_circular = env.Command(["${SAMPLE}_circular.reads.bed"], 
                               env['BED'], 
                               extract_circular_cmd)

## COLLECT SPLICE JUNCTIONS
collect_splice_cmd = "haarz.x split -f $SOURCE $HAARZ_PARAMS | "\
                     "sort -k1,1n -k2,2n > ${TARGETS[0]}"
collect_splice_targets = ["splicesites.bed"]
collect_splice = env.Command(collect_splice_targets, 
                             extract_circular, 
                             collect_splice_cmd)

bks_reads_cmd = '''tail -n+2 ${SOURCES[0]} | cut -f 1-6 | '''\
                '''bedtools intersect -a ${SOURCES[1]} -b stdin -wa | '''\
                '''cut -f 3 -d ';' | sort | uniq -c | '''\
                '''sed -E "s/[^0-9]*([0-9]+)[ ]+([^ ]+)[ ]*/\\1\\t\\2/g" | '''\
                '''sort -k1,1nr > ${TARGETS[0]} '''

bks_reads = env.Command([env['SAMPLE'] + '.testrealign.bks.reads'], 
                        [collect_splice_targets, extract_circular], 
                        bks_reads_cmd)

Return('collect_splice', 'extract_circular', 'bks_reads')

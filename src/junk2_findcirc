'''

This is a SConscript script that executes the tasks necessary to find 
circular RNA junctions from RNA-seq data, according to the procedure 
described in:

  Nature. 2013 Mar 21;495(7441):333-8. 
  doi: 10.1038/nature11928. Epub 2013 Feb 27.
      
  Circular RNAs are a large class of animal RNAs with regulatory potency.
          
  Memczak S, Jens M, Elefsinioti A, Torti F, Krueger J, Rybak A, Maier L,
  Mackowiak SD, Gregersen LH, Munschauer M, Loewer A, Ziebold U, 
  Landthaler M, Kocks C, le Noble F, Rajewsky N.

Download the scripts from http://www.circbase.org/download/find_circ.tar.gz

Software dependencies: 
 * Bowtie2-2.2.4
 * Samtools-1.1
 * Pysam

When called from a SConscript it imports the following variables:
 * find_circ_cpus
 * find_circ_bt2_idx
 * find_circ_reads
 * find_circ_genome
 * find_circ_sample

'''
import os

Import('*')

try:
    # these variables can be passed with 'exports' when calling this SConscript
    # from another SConscript
    env = env.Clone()
    CPUS = find_circ_cpus
    BOWTIE2_INDEX = find_circ_bt2_idx
    READS = find_circ_reads
    GENOME_FASTA = find_circ_genome
    SAMPLE = find_circ_sample
except NameError:
    vars = Variables('vars.py')
    vars.Add('CPUS', 'Max parallel jobs to execute', '4')
    vars.Add('BOWTIE2_INDEX', 'The Bowtie2 index', 'bt2_cdr1as_locus')
    vars.Add('GENOME_FASTA', 'The  path to genome. Point to folder with one fasta file for each chromosome.', '.')
    vars.Add('READS', 'Input reads. If paired-end, use a comma separated list', 'reads.fa')
    vars.Add('SAMPLE', 'Name of the sample', 'cdr1as_test_')
    env = Environment(ENV=os.environ,
                      variables=vars)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

    CPUS = env['CPUS']
    BOWTIE2_INDEX = env['BOWTIE2_INDEX'] # Assume you have already your genome Bowtie2 index
    READS = env['READS'].split(',')
    GENOME_FASTA = env['GENOME_FASTA']
    SAMPLE = env['SAMPLE']

log_id = "[FINDCIRC]"
try:
    env['LOG_PREFIX'] = env['LOG_PREFIX'] + log_id
except KeyError:
    env['LOG_PREFIX'] = log_id

out_dir = 'find_circ_out'

read_bowtie2_par = '-U ${SOURCE}'
if len(READS)==2:
    read_bowtie2_par = '-1 ${SOURCES[0]} -2 ${SOURCES[1]}'

split_fasta_genome_cmd = ''
if os.path.isfile(GENOME_FASTA):
    tmp_findcirc_dir = os.path.join(Dir('.').abspath, out_dir, 'tmp_findcirc')
    split_fasta_genome_cmd = ' mkdir -p ' + tmp_findcirc_dir + ' && cat ' + GENOME_FASTA +\
                    ''' | awk 'BEGIN { CHROM="" } { if ($1~"^>") CHROM=substr($1,2); '''\
                    '''print $0 > "''' + tmp_findcirc_dir + '''/"CHROM".fa" }' && '''
    GENOME_FASTA = tmp_findcirc_dir

bt2_firstpass   = os.path.join(Dir('.').abspath, out_dir, 'bt2_firstpass.log')
bt2_secondpass  = os.path.join(Dir('.').abspath, out_dir, 'bt2_secondpass.log')
find_circ_log   = os.path.join(Dir('.').abspath, out_dir, 'find_circ.log')

map_reads_cmd   = split_fasta_genome_cmd + 'bowtie2 $(-p'+ CPUS +\
                '$) --very-sensitive --score-min=C,-15,0 -x ' +\
                BOWTIE2_INDEX + ' -q ' + read_bowtie2_par + ' 2> '+ bt2_firstpass +\
                ' | samtools view -hu - | samtools sort -O "bam" -T $( findcirc_'+ SAMPLE +\
                ' -@ ' + CPUS + '$) - > $TARGET'
map_reads = env.Command([os.path.join(out_dir, SAMPLE+'_bt2.bam')],
                        READS,
                        map_reads_cmd)

find_circ_cmd = 'samtools view $(-@ ' + CPUS + '$) -hbf 4 $SOURCE | unmapped2anchors.py - |'+\
                ' bowtie2 --reorder --score-min=C,-15,0 -q -x ' +\
                BOWTIE2_INDEX + ' -U - 2> ' + bt2_secondpass + ' | find_circ.py '+\
                ' -G ' + GENOME_FASTA + ' -p ' + SAMPLE + '_ -s '+\
                find_circ_log + ' > ${TARGETS[0]} 2> ${TARGETS[1]}'

if not split_fasta_genome_cmd == '':
    find_circ_cmd = find_circ_cmd + ' && rm -rf ' + tmp_findcirc_dir

find_circ = env.Command([os.path.join(out_dir, 'sites.bed'), 
                         os.path.join(out_dir, 'sites.reads')], 
                        map_reads, 
                        find_circ_cmd)

# To get a reasonable set of circRNA candidates try:
filter_circ_cmd = 'grep circ ${SOURCES[0]} | sum.py -2,3 |' +\
                  ' scorethresh.py -16 1 |'+\
                  ' scorethresh.py -15 2 | scorethresh.py -14 2 | scorethresh.py 7 2 |'+\
                  ' scorethresh.py 8,9 35 | scorethresh.py -17 100000 > ${TARGET}'
filter_circ = env.Command([os.path.join(out_dir, 'circ_candidates.bed')], 
                          [find_circ[0]], 
                          filter_circ_cmd)

Clean(find_circ, [find_circ_log, bt2_firstpass, bt2_secondpass])
Clean('.', out_dir)

##
mappings_file = map_reads[0]
mapped_reads_target = os.path.join(out_dir, 'find_circ_mapped_reads_count.txt')
mapped_reads_cmd    = '''samtools view -F 4 ${SOURCE} '''\
                      '''| cut -f 1 | sort | uniq | wc -l > $TARGET'''
mapped_reads        = env.Command(mapped_reads_target, mappings_file, mapped_reads_cmd)

Return('find_circ filter_circ mapped_reads')
